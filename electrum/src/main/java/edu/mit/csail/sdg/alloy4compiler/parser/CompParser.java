
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 01 16:42:54 WEST 2019
//----------------------------------------------------

package edu.mit.csail.sdg.alloy4compiler.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.Attr.AttrType;
import edu.mit.csail.sdg.alloy4compiler.ast.CommandScope;
import edu.mit.csail.sdg.alloy4compiler.ast.Decl;
import edu.mit.csail.sdg.alloy4compiler.ast.Expr;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBadJoin;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprITE;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprLet;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprList;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQt;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig.PrimSig;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 01 16:42:54 WEST 2019
  */
public class CompParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0193\000\002\113\003\000\002\002\004\000\002\114" +
    "\005\000\002\114\010\000\002\114\006\000\002\114\010" +
    "\000\002\114\011\000\002\114\013\000\002\114\011\000" +
    "\002\114\010\000\002\114\005\000\002\114\006\000\002" +
    "\114\006\000\002\114\005\000\002\114\006\000\002\114" +
    "\006\000\002\114\004\000\002\114\004\000\002\114\004" +
    "\000\002\114\004\000\002\114\004\000\002\114\004\000" +
    "\002\114\002\000\002\013\003\000\002\013\003\000\002" +
    "\012\007\000\002\012\006\000\002\012\011\000\002\012" +
    "\010\000\002\012\007\000\002\012\006\000\002\012\011" +
    "\000\002\012\010\000\002\027\002\000\002\027\004\000" +
    "\002\102\004\000\002\102\006\000\002\102\004\000\002" +
    "\102\002\000\002\117\003\000\002\117\005\000\002\116" +
    "\004\000\002\116\004\000\002\116\004\000\002\116\004" +
    "\000\002\116\004\000\002\116\004\000\002\116\004\000" +
    "\002\116\004\000\002\115\004\000\002\115\007\000\002" +
    "\115\011\000\002\115\006\000\002\115\003\000\002\115" +
    "\006\000\002\115\010\000\002\115\005\000\002\051\011" +
    "\000\002\051\010\000\002\051\011\000\002\051\010\000" +
    "\002\051\006\000\002\052\003\000\002\052\004\000\002" +
    "\037\013\000\002\037\013\000\002\037\010\000\002\037" +
    "\015\000\002\037\015\000\002\037\012\000\002\073\011" +
    "\000\002\073\011\000\002\073\006\000\002\073\013\000" +
    "\002\073\013\000\002\073\010\000\002\074\011\000\002" +
    "\074\011\000\002\074\006\000\002\074\013\000\002\074" +
    "\013\000\002\074\010\000\002\132\002\000\002\132\003" +
    "\000\002\103\011\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\106\003\000\002\106\004\000\002\104" +
    "\004\000\002\104\004\000\002\104\004\000\002\104\002" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\107\005\000\002" +
    "\107\003\000\002\111\002\000\002\111\003\000\002\110" +
    "\003\000\002\110\005\000\002\112\003\000\002\112\005" +
    "\000\002\053\003\000\002\053\005\000\002\053\005\000" +
    "\002\054\003\000\002\054\005\000\002\055\003\000\002" +
    "\055\005\000\002\056\003\000\002\056\004\000\002\056" +
    "\005\000\002\056\006\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\014\007\000\002\014\006\000" +
    "\002\014\005\000\002\014\007\000\002\014\010\000\002" +
    "\014\007\000\002\014\006\000\002\014\007\000\002\014" +
    "\007\000\002\014\007\000\002\014\010\000\002\014\007" +
    "\000\002\014\006\000\002\014\010\000\002\014\011\000" +
    "\002\014\010\000\002\014\007\000\002\015\003\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\007\000\002\015\006\000\002\015\005\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\010\000" +
    "\002\015\007\000\002\015\006\000\002\020\005\000\002" +
    "\020\003\000\002\016\005\000\002\016\003\000\002\017" +
    "\002\000\002\017\003\000\002\017\005\000\002\017\004" +
    "\000\002\050\006\000\002\050\007\000\002\032\002\000" +
    "\002\032\003\000\002\031\005\000\002\031\004\000\002" +
    "\033\003\000\002\033\004\000\002\034\004\000\002\034" +
    "\003\000\002\035\002\000\002\035\003\000\002\036\003" +
    "\000\002\036\005\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\067\003\000\002\067\005" +
    "\000\002\070\003\000\002\070\005\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\040\003\000\002\040\003\000\002\042\003\000\002\042" +
    "\007\000\002\044\007\000\002\044\005\000\002\042\007" +
    "\000\002\044\005\000\002\041\003\000\002\041\003\000" +
    "\002\043\003\000\002\043\007\000\002\045\007\000\002" +
    "\045\005\000\002\002\003\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\063\003\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\064\003\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
    "\005\000\002\061\003\000\002\061\004\000\002\061\004" +
    "\000\002\061\004\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\061\004\000\002\061\004\000\002" +
    "\061\004\000\002\061\004\000\002\061\004\000\002\061" +
    "\004\000\002\062\003\000\002\062\004\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\062\004\000" +
    "\002\062\004\000\002\057\003\000\002\057\004\000\002" +
    "\057\004\000\002\060\003\000\002\060\004\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\003\000\002\120\003\000\002\120\005\000\002\120\005" +
    "\000\002\120\005\000\002\121\003\000\002\121\005\000" +
    "\002\121\005\000\002\121\005\000\002\124\003\000\002" +
    "\124\005\000\002\124\005\000\002\124\005\000\002\124" +
    "\005\000\002\125\003\000\002\125\005\000\002\125\005" +
    "\000\002\125\005\000\002\125\005\000\002\122\003\000" +
    "\002\122\005\000\002\122\005\000\002\122\005\000\002" +
    "\123\003\000\002\123\005\000\002\123\005\000\002\123" +
    "\005\000\002\065\003\000\002\065\004\000\002\065\004" +
    "\000\002\065\004\000\002\065\004\000\002\065\004\000" +
    "\002\065\004\000\002\066\003\000\002\066\004\000\002" +
    "\066\004\000\002\066\004\000\002\071\003\000\002\071" +
    "\005\000\002\072\003\000\002\072\005\000\002\046\003" +
    "\000\002\046\005\000\002\047\003\000\002\047\005\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\100\003\000\002\100\005\000\002\101\003\000\002\101" +
    "\005\000\002\021\003\000\002\021\005\000\002\022\003" +
    "\000\002\022\005\000\002\075\003\000\002\075\005\000" +
    "\002\076\003\000\002\076\005\000\002\006\003\000\002" +
    "\007\003\000\002\007\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\023\003" +
    "\000\002\023\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\126\004\000\002\126\004\000\002\126" +
    "\004\000\002\126\004\000\002\126\004\000\002\126\004" +
    "\000\002\127\003\000\002\127\004\000\002\127\004\000" +
    "\002\127\004\000\002\126\004\000\002\126\004\000\002" +
    "\127\004\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\006\000\002" +
    "\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u031f\000\002\001\uffeb\000\004\002\u0321\001\002\000" +
    "\034\002\001\035\027\043\010\050\020\066\017\105\006" +
    "\112\022\126\030\130\033\152\012\157\025\165\014\171" +
    "\031\001\uffaf\000\002\001\uffab\000\002\001\uffef\000\014" +
    "\101\262\160\057\176\052\203\047\205\u031d\001\002\000" +
    "\002\001\uffed\000\016\057\uffae\070\uffae\103\uffae\127\uffae" +
    "\144\uffae\151\uffae\001\uffa8\000\002\001\uffee\000\002\001" +
    "\uffa6\000\012\101\262\160\057\176\052\203\047\001\002" +
    "\000\002\001\ufff0\000\014\101\262\160\057\176\052\203" +
    "\047\205\u030c\001\002\000\002\001\uffea\000\002\001\ufff1" +
    "\000\010\160\057\176\052\203\047\001\002\000\020\035" +
    "\027\105\006\126\030\130\033\152\u02ff\165\014\171\031" +
    "\001\002\000\010\160\057\176\052\203\047\001\002\000" +
    "\002\001\uffe9\000\004\076\u02bc\001\uffec\000\002\001\uffac" +
    "\000\002\001\uffaa\000\002\001\uffa9\000\016\057\034\070" +
    "\041\103\035\127\040\144\037\151\036\001\002\000\002" +
    "\001\uffa7\000\010\160\057\176\052\203\047\001\002\000" +
    "\010\160\057\176\052\203\047\001\002\000\022\115\051" +
    "\160\045\166\053\173\044\176\052\177\042\201\050\203" +
    "\047\001\002\000\010\160\057\176\052\203\047\001\002" +
    "\000\010\160\057\176\052\203\047\001\002\000\022\115" +
    "\051\160\045\166\053\173\044\176\052\177\042\201\050" +
    "\203\047\001\002\000\002\001\uff9d\000\010\051\u0262\102" +
    "\u0264\106\u0263\001\uffa0\000\002\001\uff9e\000\004\167\u0128" +
    "\001\002\000\004\167\062\001\uff93\000\002\001\uff90\000" +
    "\002\001\uff9f\000\002\001\uff9a\000\004\167\u017b\001\002" +
    "\000\002\001\uff9c\000\004\055\055\001\002\000\010\160" +
    "\057\176\052\203\047\001\002\000\010\051\064\102\066" +
    "\106\065\001\002\000\004\167\060\001\002\000\004\203" +
    "\047\001\002\000\004\167\062\001\uff91\000\004\203\063" +
    "\001\002\000\002\001\uff8f\000\134\031\127\032\156\033" +
    "\162\034\163\036\133\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\103\234\104\222\105" +
    "\165\106\137\113\164\114\231\115\051\116\144\125\122" +
    "\126\166\131\134\132\206\133\146\134\153\135\227\136" +
    "\171\160\216\161\213\166\053\170\174\171\223\172\175" +
    "\173\044\174\212\175\130\176\204\177\042\200\145\201" +
    "\050\203\047\204\161\205\150\001\002\000\024\052\100" +
    "\053\067\062\071\130\076\146\070\152\101\160\057\176" +
    "\052\203\047\001\uff63\000\024\052\100\053\067\062\071" +
    "\130\076\146\070\152\101\160\057\176\052\203\047\001" +
    "\uff63\000\010\160\057\176\052\203\047\001\002\000\010" +
    "\160\057\176\052\203\047\001\002\000\010\160\057\176" +
    "\052\203\047\001\002\000\002\001\uff8e\000\004\052\u024a" +
    "\001\uff62\000\010\051\u01f6\052\104\060\u0246\001\002\000" +
    "\002\001\uff74\000\014\053\u022f\152\u0231\160\057\176\052" +
    "\203\047\001\002\000\004\155\u022b\001\002\000\024\052" +
    "\100\053\067\062\071\130\076\146\070\152\101\160\057" +
    "\176\052\203\047\001\uff63\000\012\053\102\160\057\176" +
    "\052\203\047\001\002\000\010\160\057\176\052\203\047" +
    "\001\002\000\010\051\106\052\104\060\105\001\002\000" +
    "\010\160\057\176\052\203\047\001\002\000\134\031\127" +
    "\032\156\033\162\034\163\036\133\037\210\044\107\047" +
    "\226\053\u0222\073\237\074\125\100\200\101\135\103\234" +
    "\104\222\105\165\106\137\113\164\114\231\115\051\116" +
    "\144\125\122\126\166\131\134\132\206\133\146\134\153" +
    "\135\227\136\171\160\216\161\213\166\053\170\174\171" +
    "\223\172\175\173\044\174\212\175\130\176\204\177\042" +
    "\200\145\201\050\203\047\204\161\205\150\001\002\000" +
    "\134\031\127\032\156\033\162\034\163\036\133\037\210" +
    "\044\107\047\226\053\202\073\237\074\125\100\200\101" +
    "\135\103\234\104\222\105\165\106\137\113\164\114\231" +
    "\115\051\116\144\125\122\126\166\131\134\132\206\133" +
    "\146\134\153\135\227\136\171\160\216\161\213\166\053" +
    "\170\174\171\223\172\175\173\044\174\212\175\130\176" +
    "\204\177\042\200\145\201\050\203\047\204\161\205\150" +
    "\001\002\000\010\160\057\176\052\203\047\001\002\000" +
    "\002\001\uff41\000\002\001\uff43\000\006\143\u021e\202\244" +
    "\001\uff4f\000\006\041\u0215\076\u0214\001\uff35\000\002\001" +
    "\uff3d\000\004\143\u0212\001\uff27\000\002\001\uff2d\000\044" +
    "\004\371\005\356\006\372\007\364\010\365\011\374\012" +
    "\367\013\361\014\375\015\363\016\360\017\366\020\357" +
    "\021\370\022\362\023\376\054\u020e\001\ufea1\000\002\001" +
    "\ufea3\000\002\001\ufeca\000\022\053\067\062\071\130\076" +
    "\146\070\152\101\160\057\176\052\203\047\001\002\000" +
    "\002\001\ufece\000\004\150\u020a\001\ufebf\000\002\001\ufe79" +
    "\000\002\001\ufec6\000\002\001\ufe77\000\104\031\127\032" +
    "\156\033\162\034\163\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\102\333\103\234\104" +
    "\222\106\137\113\164\115\051\125\122\160\045\166\053" +
    "\170\174\172\175\173\044\174\212\175\130\176\204\177" +
    "\042\200\145\201\050\203\047\204\161\205\150\001\002" +
    "\000\002\001\uff14\000\002\001\uff21\000\102\031\127\032" +
    "\156\033\162\034\163\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\103\234\104\222\106" +
    "\137\113\164\115\051\125\122\160\045\166\053\170\174" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\134" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\103\234\104\222\105\165\106\137\113\164\114\231\115" +
    "\051\116\144\125\122\126\166\131\134\132\206\133\146" +
    "\134\153\135\227\136\171\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\002\000\146\031\127\032\156\033\162\034\163\036\133" +
    "\037\210\044\107\047\226\053\u01e0\062\u01dc\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\105\165\106\137" +
    "\113\164\114\231\115\051\116\144\125\122\126\166\130" +
    "\076\131\134\132\206\133\146\134\153\135\227\136\171" +
    "\146\u01dd\152\u01e3\154\266\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\002\000\002\001\uff84\000\134\031\127\032\156\033\162" +
    "\034\163\036\133\037\210\044\107\047\226\053\242\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\105\165" +
    "\106\137\113\164\114\231\115\051\116\144\125\122\126" +
    "\166\131\134\132\206\133\146\134\153\135\227\136\171" +
    "\160\216\161\213\166\053\170\174\171\223\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\004\153\u01d8\001" +
    "\ufe9d\000\002\001\ufe9f\000\006\055\u01d6\102\321\001\ufe99" +
    "\000\002\001\ufe9b\000\120\031\127\032\156\033\162\034" +
    "\163\036\133\037\210\044\107\047\226\053\242\073\237" +
    "\074\125\100\200\101\135\103\234\104\222\105\165\106" +
    "\137\113\164\114\231\115\051\116\144\125\122\126\166" +
    "\160\216\161\213\166\053\170\174\171\223\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\070\031\127\032" +
    "\156\033\162\037\210\044\107\047\226\074\125\101\135" +
    "\103\234\104\222\106\137\113\164\115\051\125\122\160" +
    "\045\166\053\170\174\172\175\173\044\174\212\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\002\000\134\031\127\032\156\033\162\034\163\036\133" +
    "\037\210\044\107\047\226\053\242\073\237\074\125\100" +
    "\200\101\135\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\ufe73\000\002\001\ufe7a\000" +
    "\010\162\u010e\163\u010d\164\u010f\001\ufee1\000\002\001\ufef5" +
    "\000\134\031\127\032\156\033\162\034\163\036\133\037" +
    "\210\044\107\047\226\053\242\073\237\074\125\100\200" +
    "\101\135\103\234\104\222\105\165\106\137\113\164\114" +
    "\231\115\051\116\144\125\122\126\166\131\134\132\206" +
    "\133\146\134\153\135\227\136\171\160\216\161\213\166" +
    "\053\170\174\171\223\172\175\173\044\174\212\175\130" +
    "\176\204\177\042\200\145\201\050\203\047\204\161\205" +
    "\150\001\002\000\032\060\u01b4\071\u01b2\072\u01ab\077\u01ad" +
    "\107\u01b5\110\u01ae\117\u01ac\120\u01b1\121\u01af\122\u01aa\123" +
    "\u01b3\124\u01b0\001\uff0a\000\002\001\uff0d\000\002\001\ufe76" +
    "\000\004\145\u01a6\001\uff50\000\002\001\uff51\000\002\001" +
    "\ufe7b\000\002\001\ufe75\000\004\102\u01a3\001\002\000\022" +
    "\053\067\062\071\130\076\146\070\152\101\160\057\176" +
    "\052\203\047\001\002\000\102\031\127\032\156\033\162" +
    "\034\163\037\210\044\107\047\226\053\242\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\106\137\113\164" +
    "\115\051\125\122\160\045\166\053\170\174\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\102\031\127\032" +
    "\156\033\162\034\163\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\103\234\104\222\106" +
    "\137\113\164\115\051\125\122\160\045\166\053\170\174" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\004" +
    "\075\u018c\001\uff45\000\002\001\uff47\000\134\031\127\032" +
    "\156\033\162\034\163\036\133\037\210\044\107\047\226" +
    "\053\242\073\237\074\125\100\200\101\135\103\234\104" +
    "\222\105\165\106\137\113\164\114\231\115\051\116\144" +
    "\125\122\126\166\131\134\132\206\133\146\134\153\135" +
    "\227\136\171\160\216\161\213\166\053\170\174\171\223" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\002" +
    "\001\ufeb5\000\002\001\ufeb7\000\022\053\067\062\071\130" +
    "\076\146\070\152\101\160\057\176\052\203\047\001\002" +
    "\000\070\031\127\032\156\033\162\037\210\044\107\047" +
    "\226\074\125\101\135\103\234\104\222\106\137\113\164" +
    "\115\051\125\122\160\045\166\053\170\174\172\175\173" +
    "\044\174\212\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\004\202\330\001\ufe8e\000" +
    "\004\202\u0120\001\ufe90\000\104\031\127\032\156\033\162" +
    "\034\163\037\210\044\107\047\226\053\242\073\237\074" +
    "\125\100\200\101\135\102\336\103\234\104\222\106\137" +
    "\113\164\115\051\125\122\160\045\166\053\170\174\172" +
    "\175\173\044\174\212\175\130\176\204\177\042\200\145" +
    "\201\050\203\047\204\161\205\150\001\002\000\002\001" +
    "\ufe82\000\136\031\127\032\156\033\162\034\163\036\133" +
    "\037\210\044\107\047\226\053\242\073\237\074\125\100" +
    "\200\101\135\102\245\103\234\104\222\105\165\106\137" +
    "\113\164\114\231\115\051\116\144\125\122\126\166\131" +
    "\134\132\206\133\146\134\153\135\227\136\171\160\216" +
    "\161\213\166\053\170\174\171\223\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\010\026\u017d\027\u017f\030" +
    "\u017e\001\ufed3\000\004\167\u017b\001\ufe78\000\002\001\ufed8" +
    "\000\134\031\127\032\156\033\162\034\163\036\133\037" +
    "\210\044\107\047\226\053\242\073\237\074\125\100\200" +
    "\101\135\103\234\104\222\105\165\106\137\113\164\114" +
    "\231\115\051\116\144\125\122\126\166\131\134\132\206" +
    "\133\146\134\153\135\227\136\171\160\216\161\213\166" +
    "\053\170\174\171\223\172\175\173\044\174\212\175\130" +
    "\176\204\177\042\200\145\201\050\203\047\204\161\205" +
    "\150\001\002\000\004\040\u0177\001\ufeb9\000\022\053\067" +
    "\062\071\130\076\146\070\152\101\160\057\176\052\203" +
    "\047\001\002\000\002\001\ufebb\000\022\053\067\062\071" +
    "\130\076\146\070\152\101\160\057\176\052\203\047\001" +
    "\002\000\102\031\127\032\156\033\162\034\163\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\103\234\104\222\106\137\113\164\115\051\125\122" +
    "\160\045\166\053\170\174\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\012\137\u012c\140\u012d\141\u012e\142" +
    "\u012f\001\uff2f\000\002\001\uff31\000\104\031\127\032\156" +
    "\033\162\034\163\037\210\044\107\047\226\053\242\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\106\137" +
    "\113\164\115\051\125\122\160\045\166\053\167\u0128\170" +
    "\174\172\175\173\044\174\212\175\130\176\204\177\042" +
    "\200\145\201\050\203\047\204\161\205\150\001\002\000" +
    "\002\001\uffa0\000\002\001\ufe96\000\002\001\ufe97\000\022" +
    "\053\067\062\071\130\076\146\070\152\101\160\057\176" +
    "\052\203\047\001\002\000\102\031\127\032\156\033\162" +
    "\034\163\037\210\044\107\047\226\053\242\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\106\137\113\164" +
    "\115\051\125\122\160\045\166\053\170\174\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\uff37\000" +
    "\002\001\uff3f\000\070\031\127\032\156\033\162\037\210" +
    "\044\107\047\226\074\125\101\135\103\234\104\222\106" +
    "\137\113\164\115\051\125\122\160\045\166\053\170\174" +
    "\172\175\173\044\174\212\176\204\177\042\200\145\201" +
    "\050\203\047\204\161\205\150\001\002\000\134\031\127" +
    "\032\156\033\162\034\163\036\133\037\210\044\107\047" +
    "\226\053\242\073\237\074\125\100\200\101\135\103\234" +
    "\104\222\105\165\106\137\113\164\114\231\115\051\116" +
    "\144\125\122\126\166\131\134\132\206\133\146\134\153" +
    "\135\227\136\171\160\216\161\213\166\053\170\174\171" +
    "\223\172\175\173\044\174\212\175\130\176\204\177\042" +
    "\200\145\201\050\203\047\204\161\205\150\001\002\000" +
    "\002\001\ufe71\000\102\031\127\032\156\033\162\034\163" +
    "\037\210\044\107\047\226\053\242\073\237\074\125\100" +
    "\200\101\135\103\234\104\222\106\137\113\164\115\051" +
    "\125\122\160\045\166\053\170\174\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\012\024\277\025\275\111" +
    "\276\147\274\001\ufedc\000\002\001\ufee0\000\010\160\057" +
    "\176\052\203\047\001\002\000\002\001\uff36\000\002\001" +
    "\uff3e\000\102\031\127\032\156\033\162\034\163\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\103\234\104\222\106\137\113\164\115\051\125\122" +
    "\160\045\166\053\170\174\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\ufebe\000\002\001\ufec2\000" +
    "\004\102\245\001\002\000\004\202\244\001\ufec5\000\002" +
    "\001\ufe7e\000\134\031\127\032\156\033\162\034\163\036" +
    "\133\037\210\044\107\047\226\053\242\073\237\074\125" +
    "\100\200\101\135\103\234\104\222\105\165\106\137\113" +
    "\164\114\231\115\051\116\144\125\122\126\166\131\134" +
    "\132\206\133\146\134\153\135\227\136\171\160\216\161" +
    "\213\166\053\170\174\171\223\172\175\173\044\174\212" +
    "\175\130\176\204\177\042\200\145\201\050\203\047\204" +
    "\161\205\150\001\uff55\000\002\001\uff53\000\004\155\253" +
    "\001\002\000\004\052\251\001\uff54\000\134\031\127\032" +
    "\156\033\162\034\163\036\133\037\210\044\107\047\226" +
    "\053\242\073\237\074\125\100\200\101\135\103\234\104" +
    "\222\105\165\106\137\113\164\114\231\115\051\116\144" +
    "\125\122\126\166\131\134\132\206\133\146\134\153\135" +
    "\227\136\171\160\216\161\213\166\053\170\174\171\223" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\002" +
    "\001\uff52\000\002\001\ufe94\000\004\060\256\001\002\000" +
    "\002\001\uff4e\000\134\031\127\032\156\033\162\034\163" +
    "\036\133\037\210\044\107\047\226\053\242\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\105\165\106\137" +
    "\113\164\114\231\115\051\116\144\125\122\126\166\131" +
    "\134\132\206\133\146\134\153\135\227\136\171\160\216" +
    "\161\213\166\053\170\174\171\223\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\010\045\263\052\260\101" +
    "\262\001\002\000\010\160\057\176\052\203\047\001\002" +
    "\000\002\001\uff5f\000\136\031\127\032\156\033\162\034" +
    "\163\036\133\037\210\044\107\047\226\053\242\073\237" +
    "\074\125\100\200\101\135\103\234\104\222\105\165\106" +
    "\137\113\164\114\231\115\051\116\144\125\122\126\166" +
    "\131\134\132\206\133\146\134\153\135\227\136\171\154" +
    "\266\160\216\161\213\166\053\170\174\171\223\172\175" +
    "\173\044\174\212\175\130\176\204\177\042\200\145\201" +
    "\050\203\047\204\161\205\150\001\002\000\134\031\127" +
    "\032\156\033\162\034\163\036\133\037\210\044\107\047" +
    "\226\053\242\073\237\074\125\100\200\101\135\103\234" +
    "\104\222\105\165\106\137\113\164\114\231\115\051\116" +
    "\144\125\122\126\166\131\134\132\206\133\146\134\153" +
    "\135\227\136\171\160\216\161\213\166\053\170\174\171" +
    "\223\172\175\173\044\174\212\175\130\176\204\177\042" +
    "\200\145\201\050\203\047\204\161\205\150\001\002\000" +
    "\002\001\uff56\000\002\001\uff57\000\002\001\uff5a\000\002" +
    "\001\uff59\000\136\031\127\032\156\033\162\034\163\036" +
    "\133\037\210\044\107\047\226\053\242\073\237\074\125" +
    "\100\200\101\135\103\234\104\222\105\165\106\137\113" +
    "\164\114\231\115\051\116\144\125\122\126\166\131\134" +
    "\132\206\133\146\134\153\135\227\136\171\154\271\160" +
    "\216\161\213\166\053\170\174\171\223\172\175\173\044" +
    "\174\212\175\130\176\204\177\042\200\145\201\050\203" +
    "\047\204\161\205\150\001\002\000\002\001\uff5b\000\002" +
    "\001\uff58\000\002\001\uff5e\000\102\031\127\032\156\033" +
    "\162\034\163\037\210\044\107\047\307\053\242\073\301" +
    "\074\125\100\302\101\135\103\234\104\222\106\137\113" +
    "\164\115\051\125\122\160\045\166\053\170\174\172\304" +
    "\173\044\174\212\175\312\176\204\177\042\200\303\201" +
    "\050\203\047\204\161\205\150\001\002\000\102\031\127" +
    "\032\156\033\162\034\163\037\210\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\103\234\104\222" +
    "\106\137\113\164\115\051\125\122\160\045\166\053\170" +
    "\174\172\304\173\044\174\212\175\312\176\204\177\042" +
    "\200\303\201\050\203\047\204\161\205\150\001\002\000" +
    "\102\031\127\032\156\033\162\034\163\037\210\044\107" +
    "\047\307\053\242\073\301\074\125\100\302\101\135\103" +
    "\234\104\222\106\137\113\164\115\051\125\122\160\045" +
    "\166\053\170\174\172\304\173\044\174\212\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\102\031\127\032\156\033\162\034\163\037" +
    "\210\044\107\047\307\053\242\073\301\074\125\100\302" +
    "\101\135\103\234\104\222\106\137\113\164\115\051\125" +
    "\122\160\045\166\053\170\174\172\304\173\044\174\212" +
    "\175\312\176\204\177\042\200\303\201\050\203\047\204" +
    "\161\205\150\001\002\000\004\040\353\001\ufeb9\000\064" +
    "\031\127\032\156\033\162\034\163\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\106\137\115\051" +
    "\160\045\166\053\172\304\173\044\175\312\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\066\031\127\032\156\033\162\034\163\044\107\047" +
    "\307\053\242\073\301\074\125\100\302\101\135\102\336" +
    "\106\137\115\051\160\045\166\053\172\304\173\044\175" +
    "\312\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\052\031\127\032\156\033\162\044" +
    "\107\047\307\074\125\101\135\106\137\115\051\160\045" +
    "\166\053\172\304\173\044\176\204\177\042\200\303\201" +
    "\050\203\047\204\161\205\150\001\002\000\052\031\127" +
    "\032\156\033\162\044\107\047\307\074\125\101\135\106" +
    "\137\115\051\160\045\166\053\172\304\173\044\176\204" +
    "\177\042\200\303\201\050\203\047\204\161\205\150\001" +
    "\002\000\044\004\371\005\356\006\372\007\364\010\365" +
    "\011\374\012\367\013\361\014\375\015\363\016\360\017" +
    "\366\020\357\021\370\022\362\023\376\054\355\001\ufea1" +
    "\000\004\150\351\001\ufebf\000\052\031\127\032\156\033" +
    "\162\044\107\047\307\074\125\101\135\106\137\115\051" +
    "\160\045\166\053\172\304\173\044\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\010" +
    "\026\342\027\344\030\343\001\ufed0\000\006\055\322\102" +
    "\321\001\ufe99\000\066\031\127\032\156\033\162\034\163" +
    "\044\107\047\307\053\242\073\301\074\125\100\302\101" +
    "\135\102\333\106\137\115\051\160\045\166\053\172\304" +
    "\173\044\175\312\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\004\153\315\001\ufe9d" +
    "\000\002\001\ufed5\000\062\031\127\032\156\033\162\034" +
    "\163\044\107\047\307\053\242\074\125\100\316\101\135" +
    "\106\137\115\051\160\045\166\053\172\304\173\044\175" +
    "\317\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\004\102\336\001\002\000\004\102" +
    "\333\001\002\000\006\055\322\102\321\001\ufe98\000\134" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\103\234\104\222\105\165\106\137\113\164\114\231\115" +
    "\051\116\144\125\122\126\166\131\134\132\206\133\146" +
    "\134\153\135\227\136\171\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\uff55\000\062\031\127\032\156\033\162\034\323\044\107" +
    "\047\307\053\325\074\125\100\324\101\135\106\137\115" +
    "\051\160\045\166\053\172\304\173\044\175\326\176\204" +
    "\177\042\200\303\201\050\203\047\204\161\205\150\001" +
    "\002\000\002\001\ufe8b\000\002\001\ufe8a\000\002\001\ufe8c" +
    "\000\002\001\ufe89\000\004\202\330\001\ufe8d\000\002\001" +
    "\ufe7c\000\004\155\332\001\002\000\002\001\ufe95\000\134" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\103\234\104\222\105\165\106\137\113\164\114\231\115" +
    "\051\116\144\125\122\126\166\131\134\132\206\133\146" +
    "\134\153\135\227\136\171\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\uff55\000\004\155\335\001\002\000\002\001\ufe91\000\134" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\103\234\104\222\105\165\106\137\113\164\114\231\115" +
    "\051\116\144\125\122\126\166\131\134\132\206\133\146" +
    "\134\153\135\227\136\171\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\uff55\000\004\155\340\001\002\000\002\001\ufe92\000\002" +
    "\001\ufebd\000\064\031\127\032\156\033\162\034\163\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\106\137\115\051\160\045\166\053\172\304\173\044\175" +
    "\312\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\064\031\127\032\156\033\162\034" +
    "\163\044\107\047\307\053\242\073\301\074\125\100\302" +
    "\101\135\106\137\115\051\160\045\166\053\172\304\173" +
    "\044\175\312\176\204\177\042\200\303\201\050\203\047" +
    "\204\161\205\150\001\002\000\064\031\127\032\156\033" +
    "\162\034\163\044\107\047\307\053\242\073\301\074\125" +
    "\100\302\101\135\106\137\115\051\160\045\166\053\172" +
    "\304\173\044\175\312\176\204\177\042\200\303\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\ufec8\000" +
    "\002\001\ufec7\000\002\001\ufec9\000\004\202\330\001\ufe7f" +
    "\000\062\031\127\032\156\033\162\034\163\044\107\047" +
    "\307\053\242\074\125\100\316\101\135\106\137\115\051" +
    "\160\045\166\053\172\304\173\044\175\317\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\004\040\353\001\ufeb8\000\062\031\127\032\156\033" +
    "\162\034\163\044\107\047\307\053\242\074\125\100\316" +
    "\101\135\106\137\115\051\160\045\166\053\172\304\173" +
    "\044\175\317\176\204\177\042\200\303\201\050\203\047" +
    "\204\161\205\150\001\002\000\002\001\ufeb4\000\062\031" +
    "\127\032\156\033\162\034\163\044\107\047\307\053\242" +
    "\074\125\100\316\101\135\106\137\115\051\160\045\166" +
    "\053\172\304\173\044\175\317\176\204\177\042\200\303" +
    "\201\050\203\047\204\161\205\150\001\002\000\002\001" +
    "\ufeb2\000\002\001\ufea7\000\002\001\ufea9\000\002\001\ufeac" +
    "\000\002\001\ufea5\000\002\001\ufeaa\000\002\001\ufeb0\000" +
    "\002\001\ufeaf\000\002\001\ufea8\000\002\001\ufead\000\002" +
    "\001\ufea6\000\002\001\ufeb3\000\002\001\ufeb1\000\062\031" +
    "\127\032\156\033\162\034\163\044\107\047\307\053\242" +
    "\074\125\100\316\101\135\106\137\115\051\160\045\166" +
    "\053\172\304\173\044\175\317\176\204\177\042\200\303" +
    "\201\050\203\047\204\161\205\150\001\002\000\002\001" +
    "\ufeae\000\002\001\ufeab\000\002\001\ufea4\000\002\001\ufea0" +
    "\000\004\153\315\001\ufe9c\000\004\202\330\001\ufe80\000" +
    "\004\202\330\001\ufe81\000\002\001\ufebc\000\010\026\342" +
    "\027\344\030\343\001\ufed1\000\002\001\ufed6\000\010\026" +
    "\342\027\344\030\343\001\ufecf\000\002\001\ufed4\000\010" +
    "\026\342\027\344\030\343\001\ufed2\000\002\001\ufed7\000" +
    "\010\162\u010e\163\u010d\164\u010f\001\ufee7\000\002\001\ufefb" +
    "\000\004\202\244\001\002\000\102\031\127\032\156\033" +
    "\162\034\163\037\210\044\107\047\307\053\242\073\301" +
    "\074\125\100\302\101\135\103\234\104\222\106\137\113" +
    "\164\115\051\125\122\160\045\166\053\170\174\172\304" +
    "\173\044\174\212\175\312\176\204\177\042\200\303\201" +
    "\050\203\047\204\161\205\150\001\002\000\102\031\127" +
    "\032\156\033\162\034\163\037\210\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\103\234\104\222" +
    "\106\137\113\164\115\051\125\122\160\045\166\053\170" +
    "\174\172\304\173\044\174\212\175\312\176\204\177\042" +
    "\200\303\201\050\203\047\204\161\205\150\001\002\000" +
    "\102\031\127\032\156\033\162\034\163\037\210\044\107" +
    "\047\307\053\242\073\301\074\125\100\302\101\135\103" +
    "\234\104\222\106\137\113\164\115\051\125\122\160\045" +
    "\166\053\170\174\172\304\173\044\174\212\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\010\026\342\027\344\030\343\001\ufed3\000" +
    "\012\024\u0116\025\u0114\111\u0115\147\u0113\001\ufed9\000\002" +
    "\001\ufedd\000\064\031\127\032\156\033\162\034\163\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\106\137\115\051\160\045\166\053\172\304\173\044\175" +
    "\312\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\064\031\127\032\156\033\162\034" +
    "\163\044\107\047\307\053\242\073\301\074\125\100\302" +
    "\101\135\106\137\115\051\160\045\166\053\172\304\173" +
    "\044\175\312\176\204\177\042\200\303\201\050\203\047" +
    "\204\161\205\150\001\002\000\064\031\127\032\156\033" +
    "\162\034\163\044\107\047\307\053\242\073\301\074\125" +
    "\100\302\101\135\106\137\115\051\160\045\166\053\172" +
    "\304\173\044\175\312\176\204\177\042\200\303\201\050" +
    "\203\047\204\161\205\150\001\002\000\064\031\127\032" +
    "\156\033\162\034\163\044\107\047\307\053\242\073\301" +
    "\074\125\100\302\101\135\106\137\115\051\160\045\166" +
    "\053\172\304\173\044\175\312\176\204\177\042\200\303" +
    "\201\050\203\047\204\161\205\150\001\002\000\012\024" +
    "\u0116\025\u0114\111\u0115\147\u0113\001\ufedb\000\002\001\ufedf" +
    "\000\012\024\u0116\025\u0114\111\u0115\147\u0113\001\ufeda\000" +
    "\002\001\ufede\000\004\202\244\001\uff1d\000\002\001\uff10" +
    "\000\002\001\uff17\000\004\202\244\001\ufe86\000\004\202" +
    "\u0120\001\ufe83\000\002\001\ufe7d\000\010\162\u010e\163\u010d" +
    "\164\u010f\001\ufee6\000\002\001\ufefa\000\002\001\uff64\000" +
    "\010\045\263\052\u0125\101\262\001\002\000\022\053\067" +
    "\062\071\130\076\146\070\152\101\160\057\176\052\203" +
    "\047\001\002\000\002\001\uff4a\000\002\001\uff65\000\006" +
    "\166\u012b\203\047\001\002\000\010\162\u010e\163\u010d\164" +
    "\u010f\001\ufee2\000\002\001\ufef6\000\002\001\uff9b\000\134" +
    "\031\127\032\156\033\162\034\163\036\u013f\037\210\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\103\234\104\222\105\u013e\106\137\113\164\114\u0139\115" +
    "\051\116\u0132\125\122\126\u0138\131\u0142\132\u013b\133\u013d" +
    "\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166\053\170" +
    "\174\171\u0131\172\304\173\044\174\212\175\312\176\204" +
    "\177\042\200\303\201\050\203\047\204\161\205\150\001" +
    "\002\000\134\031\127\032\156\033\162\034\163\036\u013f" +
    "\037\210\044\107\047\307\053\242\073\301\074\125\100" +
    "\302\101\135\103\234\104\222\105\u013e\106\137\113\164" +
    "\114\u0139\115\051\116\u0132\125\122\126\u0138\131\u0142\132" +
    "\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140" +
    "\166\053\170\174\171\u0131\172\304\173\044\174\212\175" +
    "\312\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\134\031\127\032\156\033\162\034" +
    "\163\036\u013f\037\210\044\107\047\307\053\242\073\301" +
    "\074\125\100\302\101\135\103\234\104\222\105\u013e\106" +
    "\137\113\164\114\u0139\115\051\116\u0132\125\122\126\u0138" +
    "\131\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160" +
    "\u0130\161\u0140\166\053\170\174\171\u0131\172\304\173\044" +
    "\174\212\175\312\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\134\031\127\032\156" +
    "\033\162\034\163\036\u013f\037\210\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\103\234\104\222" +
    "\105\u013e\106\137\113\164\114\u0139\115\051\116\u0132\125" +
    "\122\126\u0138\131\u0142\132\u013b\133\u013d\134\u013c\135\u0136" +
    "\136\u013a\160\u0130\161\u0140\166\053\170\174\171\u0131\172" +
    "\304\173\044\174\212\175\312\176\204\177\042\200\303" +
    "\201\050\203\047\204\161\205\150\001\002\000\066\031" +
    "\127\032\156\033\162\034\163\044\107\047\307\053\242" +
    "\073\301\074\125\100\302\101\135\106\137\115\051\160" +
    "\045\166\053\167\u0128\172\304\173\044\175\312\176\204" +
    "\177\042\200\303\201\050\203\047\204\161\205\150\001" +
    "\002\000\064\031\127\032\156\033\162\034\163\044\107" +
    "\047\307\053\242\073\301\074\125\100\302\101\135\106" +
    "\137\115\051\160\045\166\053\172\304\173\044\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\102\031\127\032\156\033\162\034\163" +
    "\036\u013f\044\107\047\307\053\242\073\301\074\125\100" +
    "\302\101\135\105\u013e\106\137\114\u0139\115\051\116\u0132" +
    "\126\u0138\160\u0130\161\u0140\166\053\171\u0131\172\304\173" +
    "\044\175\312\176\204\177\042\200\303\201\050\203\047" +
    "\204\161\205\150\001\002\000\010\162\u0146\163\u0145\164" +
    "\u0147\001\ufee1\000\032\060\u015a\071\u0158\072\u0153\077\u0152" +
    "\107\u015b\110\u0154\117\u0151\120\u0157\121\u0155\122\u0150\123" +
    "\u0159\124\u0156\001\uff0a\000\002\001\uff23\000\116\031\127" +
    "\032\156\033\162\034\163\036\u013f\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\105\u013e\106\137" +
    "\114\u0139\115\051\116\u0132\126\u0138\131\u0142\132\u013b\133" +
    "\u013d\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166\053" +
    "\171\u0131\172\304\173\044\175\312\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\012" +
    "\024\u0116\025\u0114\111\u0115\147\u0113\001\ufedc\000\064\031" +
    "\127\032\156\033\162\034\163\044\107\047\307\053\242" +
    "\073\301\074\125\100\302\101\135\106\137\115\051\160" +
    "\045\166\053\172\304\173\044\175\312\176\204\177\042" +
    "\200\303\201\050\203\047\204\161\205\150\001\002\000" +
    "\064\031\127\032\156\033\162\034\163\044\107\047\307" +
    "\053\242\073\301\074\125\100\302\101\135\106\137\115" +
    "\051\160\045\166\053\172\304\173\044\175\312\176\204" +
    "\177\042\200\303\201\050\203\047\204\161\205\150\001" +
    "\002\000\116\031\127\032\156\033\162\034\163\036\u013f" +
    "\044\107\047\307\053\242\073\301\074\125\100\302\101" +
    "\135\105\u013e\106\137\114\u0139\115\051\116\u0132\126\u0138" +
    "\131\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160" +
    "\u0130\161\u0140\166\053\171\u0131\172\304\173\044\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\116\031\127\032\156\033\162\034\163" +
    "\036\u013f\044\107\047\307\053\242\073\301\074\125\100" +
    "\302\101\135\105\u013e\106\137\114\u0139\115\051\116\u0132" +
    "\126\u0138\131\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136" +
    "\u013a\160\u0130\161\u0140\166\053\171\u0131\172\304\173\044" +
    "\175\312\176\204\177\042\200\303\201\050\203\047\204" +
    "\161\205\150\001\002\000\116\031\127\032\156\033\162" +
    "\034\163\036\u013f\044\107\047\307\053\242\073\301\074" +
    "\125\100\302\101\135\105\u013e\106\137\114\u0139\115\051" +
    "\116\u0132\126\u0138\131\u0142\132\u013b\133\u013d\134\u013c\135" +
    "\u0136\136\u013a\160\u0130\161\u0140\166\053\171\u0131\172\304" +
    "\173\044\175\312\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\116\031\127\032\156" +
    "\033\162\034\163\036\u013f\044\107\047\307\053\242\073" +
    "\301\074\125\100\302\101\135\105\u013e\106\137\114\u0139" +
    "\115\051\116\u0132\126\u0138\131\u0142\132\u013b\133\u013d\134" +
    "\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166\053\171\u0131" +
    "\172\304\173\044\175\312\176\204\177\042\200\303\201" +
    "\050\203\047\204\161\205\150\001\002\000\064\031\127" +
    "\032\156\033\162\034\163\044\107\047\307\053\242\073" +
    "\301\074\125\100\302\101\135\106\137\115\051\160\045" +
    "\166\053\172\304\173\044\175\312\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\064" +
    "\031\127\032\156\033\162\034\163\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\106\137\115\051" +
    "\160\045\166\053\172\304\173\044\175\312\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\064\031\127\032\156\033\162\034\163\044\107\047" +
    "\307\053\242\073\301\074\125\100\302\101\135\106\137" +
    "\115\051\160\045\166\053\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff2a\000\116\031\127\032\156\033" +
    "\162\034\163\036\u013f\044\107\047\307\053\242\073\301" +
    "\074\125\100\302\101\135\105\u013e\106\137\114\u0139\115" +
    "\051\116\u0132\126\u0138\131\u0142\132\u013b\133\u013d\134\u013c" +
    "\135\u0136\136\u013a\160\u0130\161\u0140\166\053\171\u0131\172" +
    "\304\173\044\175\312\176\204\177\042\200\303\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\uff13\000" +
    "\010\162\u0146\163\u0145\164\u0147\001\ufee3\000\064\031\127" +
    "\032\156\033\162\034\163\044\107\047\307\053\242\073" +
    "\301\074\125\100\302\101\135\106\137\115\051\160\045" +
    "\166\053\172\304\173\044\175\312\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\064" +
    "\031\127\032\156\033\162\034\163\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\106\137\115\051" +
    "\160\045\166\053\172\304\173\044\175\312\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\064\031\127\032\156\033\162\034\163\044\107\047" +
    "\307\053\242\073\301\074\125\100\302\101\135\106\137" +
    "\115\051\160\045\166\053\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\010\162\u0146\163\u0145\164\u0147\001\ufee8\000" +
    "\010\162\u0146\163\u0145\164\u0147\001\ufee5\000\002\001\uff11" +
    "\000\002\001\uff0f\000\002\001\uff12\000\002\001\uff0e\000" +
    "\010\162\u0146\163\u0145\164\u0147\001\ufee7\000\010\162\u0146" +
    "\163\u0145\164\u0147\001\ufee4\000\064\031\127\032\156\033" +
    "\162\034\163\044\107\047\307\053\242\073\301\074\125" +
    "\100\302\101\135\106\137\115\051\160\045\166\053\172" +
    "\304\173\044\175\312\176\204\177\042\200\303\201\050" +
    "\203\047\204\161\205\150\001\002\000\064\031\127\032" +
    "\156\033\162\034\163\044\107\047\307\053\242\073\301" +
    "\074\125\100\302\101\135\106\137\115\051\160\045\166" +
    "\053\172\304\173\044\175\312\176\204\177\042\200\303" +
    "\201\050\203\047\204\161\205\150\001\002\000\064\031" +
    "\127\032\156\033\162\034\163\044\107\047\307\053\242" +
    "\073\301\074\125\100\302\101\135\106\137\115\051\160" +
    "\045\166\053\172\304\173\044\175\312\176\204\177\042" +
    "\200\303\201\050\203\047\204\161\205\150\001\002\000" +
    "\064\031\127\032\156\033\162\034\163\044\107\047\307" +
    "\053\242\073\301\074\125\100\302\101\135\106\137\115" +
    "\051\160\045\166\053\172\304\173\044\175\312\176\204" +
    "\177\042\200\303\201\050\203\047\204\161\205\150\001" +
    "\002\000\064\031\127\032\156\033\162\034\163\044\107" +
    "\047\307\053\242\073\301\074\125\100\302\101\135\106" +
    "\137\115\051\160\045\166\053\172\304\173\044\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\064\031\127\032\156\033\162\034\163" +
    "\044\107\047\307\053\242\073\301\074\125\100\302\101" +
    "\135\106\137\115\051\160\045\166\053\172\304\173\044" +
    "\175\312\176\204\177\042\200\303\201\050\203\047\204" +
    "\161\205\150\001\002\000\064\031\127\032\156\033\162" +
    "\034\163\044\107\047\307\053\242\073\301\074\125\100" +
    "\302\101\135\106\137\115\051\160\045\166\053\172\304" +
    "\173\044\175\312\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\064\031\127\032\156" +
    "\033\162\034\163\044\107\047\307\053\242\073\301\074" +
    "\125\100\302\101\135\106\137\115\051\160\045\166\053" +
    "\172\304\173\044\175\312\176\204\177\042\200\303\201" +
    "\050\203\047\204\161\205\150\001\002\000\064\031\127" +
    "\032\156\033\162\034\163\044\107\047\307\053\242\073" +
    "\301\074\125\100\302\101\135\106\137\115\051\160\045" +
    "\166\053\172\304\173\044\175\312\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\064" +
    "\031\127\032\156\033\162\034\163\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\106\137\115\051" +
    "\160\045\166\053\172\304\173\044\175\312\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\064\031\127\032\156\033\162\034\163\044\107\047" +
    "\307\053\242\073\301\074\125\100\302\101\135\106\137" +
    "\115\051\160\045\166\053\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\064\031\127\032\156\033\162\034\163\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\106\137\115\051\160\045\166\053\172\304\173\044\175" +
    "\312\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\010\162\u0146\163\u0145\164\u0147\001" +
    "\ufef2\000\010\162\u0146\163\u0145\164\u0147\001\ufef3\000\010" +
    "\162\u0146\163\u0145\164\u0147\001\ufeec\000\010\162\u0146\163" +
    "\u0145\164\u0147\001\ufef1\000\010\162\u0146\163\u0145\164\u0147" +
    "\001\ufeeb\000\010\162\u0146\163\u0145\164\u0147\001\ufeea\000" +
    "\010\162\u0146\163\u0145\164\u0147\001\ufee9\000\010\162\u0146" +
    "\163\u0145\164\u0147\001\ufef0\000\010\162\u0146\163\u0145\164" +
    "\u0147\001\ufeef\000\010\162\u0146\163\u0145\164\u0147\001\ufef4" +
    "\000\010\162\u0146\163\u0145\164\u0147\001\ufeed\000\010\162" +
    "\u0146\163\u0145\164\u0147\001\ufeee\000\002\001\uff09\000\010" +
    "\162\u0146\163\u0145\164\u0147\001\ufee6\000\010\162\u0146\163" +
    "\u0145\164\u0147\001\ufee2\000\002\001\uff25\000\002\001\uff2b" +
    "\000\002\001\uff26\000\002\001\uff2c\000\002\001\uff24\000" +
    "\002\001\uff29\000\010\162\u010e\163\u010d\164\u010f\001\ufee3" +
    "\000\002\001\ufef7\000\010\045\263\052\u0125\101\262\001" +
    "\002\000\002\001\uff48\000\010\045\263\052\u0125\101\262" +
    "\001\002\000\002\001\uff4d\000\100\031\127\032\156\033" +
    "\162\034\163\037\210\044\107\047\307\053\242\074\125" +
    "\100\316\101\135\103\234\104\222\106\137\113\164\115" +
    "\051\125\122\160\045\166\053\170\174\172\304\173\044" +
    "\174\212\175\317\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\002\001\ufeb6\000\004" +
    "\202\244\001\uff1f\000\002\001\uff19\000\004\203\047\001" +
    "\002\000\004\167\062\001\uff92\000\102\031\127\032\156" +
    "\033\162\034\163\037\210\044\107\047\307\053\242\073" +
    "\301\074\125\100\302\101\135\103\234\104\222\106\137" +
    "\113\164\115\051\125\122\160\045\166\053\170\174\172" +
    "\304\173\044\174\212\175\312\176\204\177\042\200\303" +
    "\201\050\203\047\204\161\205\150\001\002\000\102\031" +
    "\127\032\156\033\162\034\163\037\210\044\107\047\307" +
    "\053\242\073\301\074\125\100\302\101\135\103\234\104" +
    "\222\106\137\113\164\115\051\125\122\160\045\166\053" +
    "\170\174\172\304\173\044\174\212\175\312\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\102\031\127\032\156\033\162\034\163\037\210\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\103\234\104\222\106\137\113\164\115\051\125\122\160" +
    "\045\166\053\170\174\172\304\173\044\174\212\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\002\001\ufecc\000\002\001\ufecb\000\002" +
    "\001\ufecd\000\002\001\uff7a\000\002\001\ufec0\000\004\202" +
    "\244\001\ufec3\000\004\202\244\001\ufe87\000\004\202\u0120" +
    "\001\ufe84\000\010\045\263\052\u0125\101\262\001\002\000" +
    "\002\001\uff4b\000\004\202\244\001\uff1b\000\002\001\uff15" +
    "\000\134\031\127\032\156\033\162\034\163\036\u013f\037" +
    "\210\044\107\047\307\053\242\073\301\074\125\100\302" +
    "\101\135\103\234\104\222\105\u013e\106\137\113\164\114" +
    "\u0139\115\051\116\u0132\125\122\126\u0138\131\u0142\132\u013b" +
    "\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166" +
    "\053\170\174\171\u0131\172\304\173\044\174\212\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\006\041\u0196\076\u0195\001\uff35\000\002" +
    "\001\uff40\000\012\137\u0191\140\u0193\141\u0192\142\u0194\001" +
    "\uff2f\000\002\001\uff42\000\116\031\127\032\156\033\162" +
    "\034\163\036\u013f\044\107\047\307\053\242\073\301\074" +
    "\125\100\302\101\135\105\u013e\106\137\114\u0139\115\051" +
    "\116\u0132\126\u0138\131\u0142\132\u013b\133\u013d\134\u013c\135" +
    "\u0136\136\u013a\160\u0130\161\u0140\166\053\171\u0131\172\304" +
    "\173\044\175\312\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\116\031\127\032\156" +
    "\033\162\034\163\036\u013f\044\107\047\307\053\242\073" +
    "\301\074\125\100\302\101\135\105\u013e\106\137\114\u0139" +
    "\115\051\116\u0132\126\u0138\131\u0142\132\u013b\133\u013d\134" +
    "\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166\053\171\u0131" +
    "\172\304\173\044\175\312\176\204\177\042\200\303\201" +
    "\050\203\047\204\161\205\150\001\002\000\116\031\127" +
    "\032\156\033\162\034\163\036\u013f\044\107\047\307\053" +
    "\242\073\301\074\125\100\302\101\135\105\u013e\106\137" +
    "\114\u0139\115\051\116\u0132\126\u0138\131\u0142\132\u013b\133" +
    "\u013d\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166\053" +
    "\171\u0131\172\304\173\044\175\312\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\116" +
    "\031\127\032\156\033\162\034\163\036\u013f\044\107\047" +
    "\307\053\242\073\301\074\125\100\302\101\135\105\u013e" +
    "\106\137\114\u0139\115\051\116\u0132\126\u0138\131\u0142\132" +
    "\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140" +
    "\166\053\171\u0131\172\304\173\044\175\312\176\204\177" +
    "\042\200\303\201\050\203\047\204\161\205\150\001\002" +
    "\000\116\031\127\032\156\033\162\034\163\036\u013f\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\105\u013e\106\137\114\u0139\115\051\116\u0132\126\u0138\131" +
    "\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130" +
    "\161\u0140\166\053\171\u0131\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\116\031\127\032\156\033\162\034\163\036" +
    "\u013f\044\107\047\307\053\242\073\301\074\125\100\302" +
    "\101\135\105\u013e\106\137\114\u0139\115\051\116\u0132\126" +
    "\u0138\131\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a" +
    "\160\u0130\161\u0140\166\053\171\u0131\172\304\173\044\175" +
    "\312\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\012\137\u0191\140\u0193\141\u0192\142" +
    "\u0194\001\uff2e\000\002\001\uff32\000\004\056\u019a\001\uff37" +
    "\000\116\031\127\032\156\033\162\034\163\036\u013f\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\105\u013e\106\137\114\u0139\115\051\116\u0132\126\u0138\131" +
    "\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130" +
    "\161\u0140\166\053\171\u0131\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff33\000\002\001\uff34\000\010\162" +
    "\u010e\163\u010d\164\u010f\001\ufee4\000\002\001\ufef8\000\010" +
    "\162\u010e\163\u010d\164\u010f\001\ufee5\000\002\001\ufef9\000" +
    "\010\045\263\052\u0125\101\262\001\002\000\002\001\uff4c" +
    "\000\134\031\127\032\156\033\162\034\163\036\133\037" +
    "\210\044\107\047\226\053\242\073\237\074\125\100\200" +
    "\101\135\103\234\104\222\105\165\106\137\113\164\114" +
    "\231\115\051\116\144\125\122\126\166\131\134\132\206" +
    "\133\146\134\153\135\227\136\171\160\216\161\213\166" +
    "\053\170\174\171\223\172\175\173\044\174\212\175\130" +
    "\176\204\177\042\200\145\201\050\203\047\204\161\205" +
    "\150\001\uff55\000\004\155\u01a5\001\002\000\002\001\ufe93" +
    "\000\134\031\127\032\156\033\162\034\163\036\u013f\037" +
    "\210\044\107\047\307\053\242\073\301\074\125\100\302" +
    "\101\135\103\234\104\222\105\u013e\106\137\113\164\114" +
    "\u0139\115\051\116\u0132\125\122\126\u0138\131\u0142\132\u013b" +
    "\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130\161\u0140\166" +
    "\053\170\174\171\u0131\172\304\173\044\174\212\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\002\001\uff46\000\004\075\u01a9\001\uff44" +
    "\000\116\031\127\032\156\033\162\034\163\036\u013f\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\105\u013e\106\137\114\u0139\115\051\116\u0132\126\u0138\131" +
    "\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130" +
    "\161\u0140\166\053\171\u0131\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\102\031\127\032\156\033\162\034\163\037" +
    "\210\044\107\047\226\053\242\073\237\074\125\100\200" +
    "\101\135\103\234\104\222\106\137\113\164\115\051\125" +
    "\122\160\045\166\053\170\174\172\175\173\044\174\212" +
    "\175\130\176\204\177\042\200\145\201\050\203\047\204" +
    "\161\205\150\001\002\000\102\031\127\032\156\033\162" +
    "\034\163\037\210\044\107\047\226\053\242\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\106\137\113\164" +
    "\115\051\125\122\160\045\166\053\170\174\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\102\031\127\032" +
    "\156\033\162\034\163\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\103\234\104\222\106" +
    "\137\113\164\115\051\125\122\160\045\166\053\170\174" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\102" +
    "\031\127\032\156\033\162\034\163\037\210\044\107\047" +
    "\226\053\242\073\237\074\125\100\200\101\135\103\234" +
    "\104\222\106\137\113\164\115\051\125\122\160\045\166" +
    "\053\170\174\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\002\000\102\031\127\032\156\033\162\034\163\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\103\234\104\222\106\137\113\164\115\051\125\122" +
    "\160\045\166\053\170\174\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\102\031\127\032\156\033\162\034" +
    "\163\037\210\044\107\047\226\053\242\073\237\074\125" +
    "\100\200\101\135\103\234\104\222\106\137\113\164\115" +
    "\051\125\122\160\045\166\053\170\174\172\175\173\044" +
    "\174\212\175\130\176\204\177\042\200\145\201\050\203" +
    "\047\204\161\205\150\001\002\000\102\031\127\032\156" +
    "\033\162\034\163\037\210\044\107\047\226\053\242\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\106\137" +
    "\113\164\115\051\125\122\160\045\166\053\170\174\172" +
    "\175\173\044\174\212\175\130\176\204\177\042\200\145" +
    "\201\050\203\047\204\161\205\150\001\002\000\102\031" +
    "\127\032\156\033\162\034\163\037\210\044\107\047\226" +
    "\053\242\073\237\074\125\100\200\101\135\103\234\104" +
    "\222\106\137\113\164\115\051\125\122\160\045\166\053" +
    "\170\174\172\175\173\044\174\212\175\130\176\204\177" +
    "\042\200\145\201\050\203\047\204\161\205\150\001\002" +
    "\000\102\031\127\032\156\033\162\034\163\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\103\234\104\222\106\137\113\164\115\051\125\122\160" +
    "\045\166\053\170\174\172\175\173\044\174\212\175\130" +
    "\176\204\177\042\200\145\201\050\203\047\204\161\205" +
    "\150\001\002\000\102\031\127\032\156\033\162\034\163" +
    "\037\210\044\107\047\226\053\242\073\237\074\125\100" +
    "\200\101\135\103\234\104\222\106\137\113\164\115\051" +
    "\125\122\160\045\166\053\170\174\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\102\031\127\032\156\033" +
    "\162\034\163\037\210\044\107\047\226\053\242\073\237" +
    "\074\125\100\200\101\135\103\234\104\222\106\137\113" +
    "\164\115\051\125\122\160\045\166\053\170\174\172\175" +
    "\173\044\174\212\175\130\176\204\177\042\200\145\201" +
    "\050\203\047\204\161\205\150\001\002\000\102\031\127" +
    "\032\156\033\162\034\163\037\210\044\107\047\226\053" +
    "\242\073\237\074\125\100\200\101\135\103\234\104\222" +
    "\106\137\113\164\115\051\125\122\160\045\166\053\170" +
    "\174\172\175\173\044\174\212\175\130\176\204\177\042" +
    "\200\145\201\050\203\047\204\161\205\150\001\002\000" +
    "\010\162\u010e\163\u010d\164\u010f\001\ufef2\000\002\001\uff06" +
    "\000\010\162\u010e\163\u010d\164\u010f\001\ufef3\000\002\001" +
    "\uff07\000\010\162\u010e\163\u010d\164\u010f\001\ufeec\000\002" +
    "\001\uff00\000\010\162\u010e\163\u010d\164\u010f\001\ufef1\000" +
    "\002\001\uff05\000\010\162\u010e\163\u010d\164\u010f\001\ufeeb" +
    "\000\002\001\ufeff\000\010\162\u010e\163\u010d\164\u010f\001" +
    "\ufeea\000\002\001\ufefe\000\010\162\u010e\163\u010d\164\u010f" +
    "\001\ufee9\000\002\001\ufefd\000\010\162\u010e\163\u010d\164" +
    "\u010f\001\ufef0\000\002\001\uff04\000\010\162\u010e\163\u010d" +
    "\164\u010f\001\ufef4\000\002\001\uff08\000\010\162\u010e\163" +
    "\u010d\164\u010f\001\ufeed\000\002\001\uff01\000\010\162\u010e" +
    "\163\u010d\164\u010f\001\ufeef\000\002\001\uff03\000\010\162" +
    "\u010e\163\u010d\164\u010f\001\ufeee\000\002\001\uff02\000\004" +
    "\202\244\001\uff1c\000\002\001\uff16\000\004\202\244\001" +
    "\uff1e\000\002\001\uff18\000\004\202\244\001\ufe88\000\004" +
    "\202\u0120\001\ufe85\000\004\202\244\001\uff0c\000\002\001" +
    "\uff0b\000\100\031\127\032\156\033\162\034\323\037\210" +
    "\044\107\047\307\053\325\074\125\100\324\101\135\103" +
    "\234\104\222\106\137\113\164\115\051\125\122\160\045" +
    "\166\053\170\174\172\304\173\044\174\212\175\326\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\ufe8f\000\100\031\127\032\156\033" +
    "\162\034\163\037\210\044\107\047\307\053\242\074\125" +
    "\100\316\101\135\103\234\104\222\106\137\113\164\115" +
    "\051\125\122\160\045\166\053\170\174\172\304\173\044" +
    "\174\212\175\317\176\204\177\042\200\303\201\050\203" +
    "\047\204\161\205\150\001\002\000\002\001\ufe9a\000\004" +
    "\156\u01db\001\002\000\002\001\ufe74\000\010\160\057\176" +
    "\052\203\047\001\002\000\010\160\057\176\052\203\047" +
    "\001\002\000\006\051\u01f6\052\104\001\002\000\012\045" +
    "\263\052\u01f0\101\262\154\u01f2\001\002\000\012\102\245" +
    "\160\057\176\052\203\047\001\002\000\002\001\uff66\000" +
    "\006\051\uff8e\052\uff8e\001\uffa0\000\012\053\u01e4\160\057" +
    "\176\052\203\047\001\002\000\010\160\057\176\052\203" +
    "\047\001\002\000\006\051\106\052\104\001\002\000\006" +
    "\051\u01e7\052\104\001\002\000\134\031\127\032\156\033" +
    "\162\034\163\036\133\037\210\044\107\047\226\053\u01e9" +
    "\073\237\074\125\100\200\101\135\103\234\104\222\105" +
    "\165\106\137\113\164\114\231\115\051\116\144\125\122" +
    "\126\166\131\134\132\206\133\146\134\153\135\227\136" +
    "\171\160\216\161\213\166\053\170\174\171\223\172\175" +
    "\173\044\174\212\175\130\176\204\177\042\200\145\201" +
    "\050\203\047\204\161\205\150\001\002\000\002\001\uff85" +
    "\000\136\031\127\032\156\033\162\034\163\036\133\037" +
    "\210\044\107\047\226\053\242\073\237\074\125\100\200" +
    "\101\135\102\245\103\234\104\222\105\165\106\137\113" +
    "\164\114\231\115\051\116\144\125\122\126\166\131\134" +
    "\132\206\133\146\134\153\135\227\136\171\160\216\161" +
    "\213\166\053\170\174\171\223\172\175\173\044\174\212" +
    "\175\130\176\204\177\042\200\145\201\050\203\047\204" +
    "\161\205\150\001\002\000\002\001\uff7b\000\006\051\u01ec" +
    "\052\104\001\002\000\134\031\127\032\156\033\162\034" +
    "\163\036\133\037\210\044\107\047\226\053\u01ee\073\237" +
    "\074\125\100\200\101\135\103\234\104\222\105\165\106" +
    "\137\113\164\114\231\115\051\116\144\125\122\126\166" +
    "\131\134\132\206\133\146\134\153\135\227\136\171\160" +
    "\216\161\213\166\053\170\174\171\223\172\175\173\044" +
    "\174\212\175\130\176\204\177\042\200\145\201\050\203" +
    "\047\204\161\205\150\001\002\000\002\001\uff86\000\136" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\102\245\103\234\104\222\105\165\106\137\113\164\114" +
    "\231\115\051\116\144\125\122\126\166\131\134\132\206" +
    "\133\146\134\153\135\227\136\171\160\216\161\213\166" +
    "\053\170\174\171\223\172\175\173\044\174\212\175\130" +
    "\176\204\177\042\200\145\201\050\203\047\204\161\205" +
    "\150\001\002\000\002\001\uff7c\000\022\053\u01f4\062\u01dc" +
    "\130\076\146\u01dd\152\u01e3\160\057\176\052\203\047\001" +
    "\002\000\004\154\u01f3\001\002\000\002\001\ufe6f\000\002" +
    "\001\ufe70\000\010\160\057\176\052\203\047\001\002\000" +
    "\002\001\uff67\000\134\031\127\032\156\033\162\034\163" +
    "\036\133\037\210\044\107\047\226\053\u01f8\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\105\165\106\137" +
    "\113\164\114\231\115\051\116\144\125\122\126\166\131" +
    "\134\132\206\133\146\134\153\135\227\136\171\160\216" +
    "\161\213\166\053\170\174\171\223\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\002\001\uff83\000\136\031" +
    "\127\032\156\033\162\034\163\036\133\037\210\044\107" +
    "\047\226\053\242\073\237\074\125\100\200\101\135\102" +
    "\245\103\234\104\222\105\165\106\137\113\164\114\231" +
    "\115\051\116\144\125\122\126\166\131\134\132\206\133" +
    "\146\134\153\135\227\136\171\160\216\161\213\166\053" +
    "\170\174\171\223\172\175\173\044\174\212\175\130\176" +
    "\204\177\042\200\145\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff79\000\006\051\u01fb\052\104\001" +
    "\002\000\134\031\127\032\156\033\162\034\163\036\133" +
    "\037\210\044\107\047\226\053\u01fd\073\237\074\125\100" +
    "\200\101\135\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\uff88\000\136\031\127\032" +
    "\156\033\162\034\163\036\133\037\210\044\107\047\226" +
    "\053\242\073\237\074\125\100\200\101\135\102\245\103" +
    "\234\104\222\105\165\106\137\113\164\114\231\115\051" +
    "\116\144\125\122\126\166\131\134\132\206\133\146\134" +
    "\153\135\227\136\171\160\216\161\213\166\053\170\174" +
    "\171\223\172\175\173\044\174\212\175\130\176\204\177" +
    "\042\200\145\201\050\203\047\204\161\205\150\001\002" +
    "\000\002\001\uff7e\000\006\051\u0200\052\104\001\002\000" +
    "\134\031\127\032\156\033\162\034\163\036\133\037\210" +
    "\044\107\047\226\053\u0202\073\237\074\125\100\200\101" +
    "\135\103\234\104\222\105\165\106\137\113\164\114\231" +
    "\115\051\116\144\125\122\126\166\131\134\132\206\133" +
    "\146\134\153\135\227\136\171\160\216\161\213\166\053" +
    "\170\174\171\223\172\175\173\044\174\212\175\130\176" +
    "\204\177\042\200\145\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff87\000\136\031\127\032\156\033" +
    "\162\034\163\036\133\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\102\245\103\234\104" +
    "\222\105\165\106\137\113\164\114\231\115\051\116\144" +
    "\125\122\126\166\131\134\132\206\133\146\134\153\135" +
    "\227\136\171\160\216\161\213\166\053\170\174\171\223" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\002" +
    "\001\uff7d\000\004\202\244\001\uff20\000\002\001\uff1a\000" +
    "\010\162\u010e\163\u010d\164\u010f\001\ufee8\000\002\001\ufefc" +
    "\000\002\001\ufec1\000\004\202\244\001\ufec4\000\100\031" +
    "\127\032\156\033\162\034\163\037\210\044\107\047\307" +
    "\053\242\074\125\100\316\101\135\103\234\104\222\106" +
    "\137\113\164\115\051\125\122\160\045\166\053\170\174" +
    "\172\304\173\044\174\212\175\317\176\204\177\042\200" +
    "\303\201\050\203\047\204\161\205\150\001\002\000\002" +
    "\001\ufeba\000\010\045\263\052\u0125\101\262\001\002\000" +
    "\002\001\uff49\000\100\031\127\032\156\033\162\034\163" +
    "\037\210\044\107\047\307\053\242\074\125\100\316\101" +
    "\135\103\234\104\222\106\137\113\164\115\051\125\122" +
    "\160\045\166\053\170\174\172\304\173\044\174\212\175" +
    "\317\176\204\177\042\200\303\201\050\203\047\204\161" +
    "\205\150\001\002\000\100\031\127\032\156\033\162\034" +
    "\163\037\210\044\107\047\307\053\242\074\125\100\316" +
    "\101\135\103\234\104\222\106\137\113\164\115\051\125" +
    "\122\160\045\166\053\170\174\172\304\173\044\174\212" +
    "\175\317\176\204\177\042\200\303\201\050\203\047\204" +
    "\161\205\150\001\002\000\002\001\ufea2\000\002\001\ufe9e" +
    "\000\116\031\127\032\156\033\162\034\163\036\u013f\044" +
    "\107\047\307\053\242\073\301\074\125\100\302\101\135" +
    "\105\u013e\106\137\114\u0139\115\051\116\u0132\126\u0138\131" +
    "\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160\u0130" +
    "\161\u0140\166\053\171\u0131\172\304\173\044\175\312\176" +
    "\204\177\042\200\303\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff22\000\134\031\127\032\156\033" +
    "\162\034\163\036\133\037\210\044\107\047\226\053\242" +
    "\073\237\074\125\100\200\101\135\103\234\104\222\105" +
    "\165\106\137\113\164\114\231\115\051\116\144\125\122" +
    "\126\166\131\134\132\206\133\146\134\153\135\227\136" +
    "\171\160\216\161\213\166\053\170\174\171\223\172\175" +
    "\173\044\174\212\175\130\176\204\177\042\200\145\201" +
    "\050\203\047\204\161\205\150\001\002\000\134\031\127" +
    "\032\156\033\162\034\163\036\u013f\037\210\044\107\047" +
    "\307\053\242\073\301\074\125\100\302\101\135\103\234" +
    "\104\222\105\u013e\106\137\113\164\114\u0139\115\051\116" +
    "\u0132\125\122\126\u0138\131\u0142\132\u013b\133\u013d\134\u013c" +
    "\135\u0136\136\u013a\160\u0130\161\u0140\166\053\170\174\171" +
    "\u0131\172\304\173\044\174\212\175\312\176\204\177\042" +
    "\200\303\201\050\203\047\204\161\205\150\001\002\000" +
    "\002\001\uff30\000\002\001\uff3a\000\006\143\u021e\202\244" +
    "\001\uff38\000\004\056\u021a\001\uff37\000\134\031\127\032" +
    "\156\033\162\034\163\036\133\037\210\044\107\047\226" +
    "\053\242\073\237\074\125\100\200\101\135\103\234\104" +
    "\222\105\165\106\137\113\164\114\231\115\051\116\144" +
    "\125\122\126\166\131\134\132\206\133\146\134\153\135" +
    "\227\136\171\160\216\161\213\166\053\170\174\171\223" +
    "\172\175\173\044\174\212\175\130\176\204\177\042\200" +
    "\145\201\050\203\047\204\161\205\150\001\002\000\006" +
    "\143\u021e\202\244\001\uff39\000\002\001\uff3c\000\002\001" +
    "\uff3b\000\116\031\127\032\156\033\162\034\163\036\u013f" +
    "\044\107\047\307\053\242\073\301\074\125\100\302\101" +
    "\135\105\u013e\106\137\114\u0139\115\051\116\u0132\126\u0138" +
    "\131\u0142\132\u013b\133\u013d\134\u013c\135\u0136\136\u013a\160" +
    "\u0130\161\u0140\166\053\171\u0131\172\304\173\044\175\312" +
    "\176\204\177\042\200\303\201\050\203\047\204\161\205" +
    "\150\001\002\000\012\137\u0191\140\u0193\141\u0192\142\u0194" +
    "\001\uff28\000\002\001\ufe72\000\002\001\uff6f\000\136\031" +
    "\127\032\156\033\162\034\163\036\133\037\210\044\107" +
    "\047\226\053\242\073\237\074\125\100\200\101\135\102" +
    "\245\103\234\104\222\105\165\106\137\113\164\114\231" +
    "\115\051\116\144\125\122\126\166\131\134\132\206\133" +
    "\146\134\153\135\227\136\171\160\216\161\213\166\053" +
    "\170\174\171\223\172\175\173\044\174\212\175\130\176" +
    "\204\177\042\200\145\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff69\000\002\001\uff8d\000\010\051" +
    "\u01e7\052\104\060\u0226\001\002\000\134\031\127\032\156" +
    "\033\162\034\163\036\133\037\210\044\107\047\226\053" +
    "\u0228\073\237\074\125\100\200\101\135\103\234\104\222" +
    "\105\165\106\137\113\164\114\231\115\051\116\144\125" +
    "\122\126\166\131\134\132\206\133\146\134\153\135\227" +
    "\136\171\160\216\161\213\166\053\170\174\171\223\172" +
    "\175\173\044\174\212\175\130\176\204\177\042\200\145" +
    "\201\050\203\047\204\161\205\150\001\002\000\002\001" +
    "\uff70\000\136\031\127\032\156\033\162\034\163\036\133" +
    "\037\210\044\107\047\226\053\242\073\237\074\125\100" +
    "\200\101\135\102\245\103\234\104\222\105\165\106\137" +
    "\113\164\114\231\115\051\116\144\125\122\126\166\131" +
    "\134\132\206\133\146\134\153\135\227\136\171\160\216" +
    "\161\213\166\053\170\174\171\223\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\002\001\uff6a\000\002\001" +
    "\uff60\000\004\051\u022c\001\002\000\134\031\127\032\156" +
    "\033\162\034\163\036\133\037\210\044\107\047\226\053" +
    "\242\073\237\074\125\100\200\101\135\103\234\104\222" +
    "\105\165\106\137\113\164\114\231\115\051\116\144\125" +
    "\122\126\166\131\134\132\206\133\146\134\153\135\227" +
    "\136\171\160\216\161\213\166\053\170\174\171\223\172" +
    "\175\173\044\174\212\175\130\176\204\177\042\200\145" +
    "\201\050\203\047\204\161\205\150\001\002\000\004\101" +
    "\262\001\002\000\002\001\uffbd\000\010\160\057\176\052" +
    "\203\047\001\002\000\006\051\u023d\052\104\001\002\000" +
    "\012\053\u0232\160\057\176\052\203\047\001\002\000\010" +
    "\160\057\176\052\203\047\001\002\000\006\051\u0234\052" +
    "\104\001\002\000\134\031\127\032\156\033\162\034\163" +
    "\036\133\037\210\044\107\047\226\053\u0236\073\237\074" +
    "\125\100\200\101\135\103\234\104\222\105\165\106\137" +
    "\113\164\114\231\115\051\116\144\125\122\126\166\131" +
    "\134\132\206\133\146\134\153\135\227\136\171\160\216" +
    "\161\213\166\053\170\174\171\223\172\175\173\044\174" +
    "\212\175\130\176\204\177\042\200\145\201\050\203\047" +
    "\204\161\205\150\001\002\000\002\001\uff80\000\136\031" +
    "\127\032\156\033\162\034\163\036\133\037\210\044\107" +
    "\047\226\053\242\073\237\074\125\100\200\101\135\102" +
    "\245\103\234\104\222\105\165\106\137\113\164\114\231" +
    "\115\051\116\144\125\122\126\166\131\134\132\206\133" +
    "\146\134\153\135\227\136\171\160\216\161\213\166\053" +
    "\170\174\171\223\172\175\173\044\174\212\175\130\176" +
    "\204\177\042\200\145\201\050\203\047\204\161\205\150" +
    "\001\002\000\002\001\uff76\000\006\051\u0239\052\104\001" +
    "\002\000\134\031\127\032\156\033\162\034\163\036\133" +
    "\037\210\044\107\047\226\053\u023b\073\237\074\125\100" +
    "\200\101\135\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\uff81\000\136\031\127\032" +
    "\156\033\162\034\163\036\133\037\210\044\107\047\226" +
    "\053\242\073\237\074\125\100\200\101\135\102\245\103" +
    "\234\104\222\105\165\106\137\113\164\114\231\115\051" +
    "\116\144\125\122\126\166\131\134\132\206\133\146\134" +
    "\153\135\227\136\171\160\216\161\213\166\053\170\174" +
    "\171\223\172\175\173\044\174\212\175\130\176\204\177" +
    "\042\200\145\201\050\203\047\204\161\205\150\001\002" +
    "\000\002\001\uff77\000\134\031\127\032\156\033\162\034" +
    "\163\036\133\037\210\044\107\047\226\053\u023f\073\237" +
    "\074\125\100\200\101\135\103\234\104\222\105\165\106" +
    "\137\113\164\114\231\115\051\116\144\125\122\126\166" +
    "\131\134\132\206\133\146\134\153\135\227\136\171\160" +
    "\216\161\213\166\053\170\174\171\223\172\175\173\044" +
    "\174\212\175\130\176\204\177\042\200\145\201\050\203" +
    "\047\204\161\205\150\001\002\000\002\001\uff7f\000\136" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\102\245\103\234\104\222\105\165\106\137\113\164\114" +
    "\231\115\051\116\144\125\122\126\166\131\134\132\206" +
    "\133\146\134\153\135\227\136\171\160\216\161\213\166" +
    "\053\170\174\171\223\172\175\173\044\174\212\175\130" +
    "\176\204\177\042\200\145\201\050\203\047\204\161\205" +
    "\150\001\002\000\002\001\uff75\000\006\051\u0242\052\104" +
    "\001\002\000\134\031\127\032\156\033\162\034\163\036" +
    "\133\037\210\044\107\047\226\053\u0244\073\237\074\125" +
    "\100\200\101\135\103\234\104\222\105\165\106\137\113" +
    "\164\114\231\115\051\116\144\125\122\126\166\131\134" +
    "\132\206\133\146\134\153\135\227\136\171\160\216\161" +
    "\213\166\053\170\174\171\223\172\175\173\044\174\212" +
    "\175\130\176\204\177\042\200\145\201\050\203\047\204" +
    "\161\205\150\001\002\000\002\001\uff82\000\136\031\127" +
    "\032\156\033\162\034\163\036\133\037\210\044\107\047" +
    "\226\053\242\073\237\074\125\100\200\101\135\102\245" +
    "\103\234\104\222\105\165\106\137\113\164\114\231\115" +
    "\051\116\144\125\122\126\166\131\134\132\206\133\146" +
    "\134\153\135\227\136\171\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\002\000\002\001\uff78\000\134\031\127\032\156\033\162" +
    "\034\163\036\133\037\210\044\107\047\226\053\u0248\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\105\165" +
    "\106\137\113\164\114\231\115\051\116\144\125\122\126" +
    "\166\131\134\132\206\133\146\134\153\135\227\136\171" +
    "\160\216\161\213\166\053\170\174\171\223\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\uff6e\000" +
    "\136\031\127\032\156\033\162\034\163\036\133\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\102\245\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\uff68\000\024\052\100\053" +
    "\067\062\071\130\076\146\070\152\101\160\057\176\052" +
    "\203\047\001\uff63\000\002\001\uff61\000\010\051\u0200\052" +
    "\104\060\u024d\001\002\000\134\031\127\032\156\033\162" +
    "\034\163\036\133\037\210\044\107\047\226\053\u024f\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\105\165" +
    "\106\137\113\164\114\231\115\051\116\144\125\122\126" +
    "\166\131\134\132\206\133\146\134\153\135\227\136\171" +
    "\160\216\161\213\166\053\170\174\171\223\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\uff72\000" +
    "\136\031\127\032\156\033\162\034\163\036\133\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\102\245\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\uff6c\000\010\051\u01fb\052" +
    "\104\060\u0252\001\002\000\134\031\127\032\156\033\162" +
    "\034\163\036\133\037\210\044\107\047\226\053\u0254\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\105\165" +
    "\106\137\113\164\114\231\115\051\116\144\125\122\126" +
    "\166\131\134\132\206\133\146\134\153\135\227\136\171" +
    "\160\216\161\213\166\053\170\174\171\223\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\uff73\000" +
    "\136\031\127\032\156\033\162\034\163\036\133\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\102\245\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\uff6d\000\010\051\u01ec\052" +
    "\104\060\u0257\001\002\000\134\031\127\032\156\033\162" +
    "\034\163\036\133\037\210\044\107\047\226\053\u0259\073" +
    "\237\074\125\100\200\101\135\103\234\104\222\105\165" +
    "\106\137\113\164\114\231\115\051\116\144\125\122\126" +
    "\166\131\134\132\206\133\146\134\153\135\227\136\171" +
    "\160\216\161\213\166\053\170\174\171\223\172\175\173" +
    "\044\174\212\175\130\176\204\177\042\200\145\201\050" +
    "\203\047\204\161\205\150\001\002\000\002\001\uff71\000" +
    "\136\031\127\032\156\033\162\034\163\036\133\037\210" +
    "\044\107\047\226\053\242\073\237\074\125\100\200\101" +
    "\135\102\245\103\234\104\222\105\165\106\137\113\164" +
    "\114\231\115\051\116\144\125\122\126\166\131\134\132" +
    "\206\133\146\134\153\135\227\136\171\160\216\161\213" +
    "\166\053\170\174\171\223\172\175\173\044\174\212\175" +
    "\130\176\204\177\042\200\145\201\050\203\047\204\161" +
    "\205\150\001\002\000\002\001\uff6b\000\004\156\u025c\001" +
    "\002\000\004\051\u025d\001\002\000\134\031\127\032\156" +
    "\033\162\034\163\036\133\037\210\044\107\047\226\053" +
    "\242\073\237\074\125\100\200\101\135\103\234\104\222" +
    "\105\165\106\137\113\164\114\231\115\051\116\144\125" +
    "\122\126\166\131\134\132\206\133\146\134\153\135\227" +
    "\136\171\160\216\161\213\166\053\170\174\171\223\172" +
    "\175\173\044\174\212\175\130\176\204\177\042\200\145" +
    "\201\050\203\047\204\161\205\150\001\002\000\004\101" +
    "\262\001\002\000\002\001\uffbe\000\004\101\262\001\002" +
    "\000\002\001\uffbc\000\134\031\127\032\156\033\162\034" +
    "\163\036\133\037\210\044\107\047\226\053\242\073\237" +
    "\074\125\100\200\101\135\103\234\104\222\105\165\106" +
    "\137\113\164\114\231\115\051\116\144\125\122\126\166" +
    "\131\134\132\206\133\146\134\153\135\227\136\171\160" +
    "\216\161\213\166\053\170\174\171\223\172\175\173\044" +
    "\174\212\175\130\176\204\177\042\200\145\201\050\203" +
    "\047\204\161\205\150\001\002\000\024\052\100\053\067" +
    "\062\071\130\076\146\070\152\101\160\057\176\052\203" +
    "\047\001\uff63\000\024\052\100\053\067\062\071\130\076" +
    "\146\070\152\101\160\057\176\052\203\047\001\uff63\000" +
    "\004\155\u0266\001\002\000\004\051\u0267\001\002\000\134" +
    "\031\127\032\156\033\162\034\163\036\133\037\210\044" +
    "\107\047\226\053\242\073\237\074\125\100\200\101\135" +
    "\103\234\104\222\105\165\106\137\113\164\114\231\115" +
    "\051\116\144\125\122\126\166\131\134\132\206\133\146" +
    "\134\153\135\227\136\171\160\216\161\213\166\053\170" +
    "\174\171\223\172\175\173\044\174\212\175\130\176\204" +
    "\177\042\200\145\201\050\203\047\204\161\205\150\001" +
    "\002\000\004\101\262\001\002\000\002\001\uffc0\000\004" +
    "\156\u026b\001\002\000\004\051\u026c\001\002\000\134\031" +
    "\127\032\156\033\162\034\163\036\133\037\210\044\107" +
    "\047\226\053\242\073\237\074\125\100\200\101\135\103" +
    "\234\104\222\105\165\106\137\113\164\114\231\115\051" +
    "\116\144\125\122\126\166\131\134\132\206\133\146\134" +
    "\153\135\227\136\171\160\216\161\213\166\053\170\174" +
    "\171\223\172\175\173\044\174\212\175\130\176\204\177" +
    "\042\200\145\201\050\203\047\204\161\205\150\001\002" +
    "\000\004\101\262\001\002\000\002\001\uffc1\000\004\101" +
    "\262\001\002\000\002\001\uffbf\000\012\065\u0273\101\262" +
    "\102\u0275\106\u0274\001\002\000\002\001\uffb3\000\022\115" +
    "\051\160\045\166\053\173\044\176\052\177\042\201\050" +
    "\203\047\001\uff99\000\024\052\100\053\067\062\071\130" +
    "\076\146\070\152\101\160\057\176\052\203\047\001\uff63" +
    "\000\024\052\100\053\067\062\071\130\076\146\070\152" +
    "\101\160\057\176\052\203\047\001\uff63\000\004\155\u0277" +
    "\001\002\000\006\065\u0279\101\262\001\002\000\002\001" +
    "\uffb4\000\022\115\051\160\045\166\053\173\044\176\052" +
    "\177\042\201\050\203\047\001\uff99\000\004\101\262\001" +
    "\002\000\004\052\u027d\001\uff98\000\002\001\uff97\000\022" +
    "\115\051\160\045\166\053\173\044\176\052\177\042\201" +
    "\050\203\047\001\002\000\002\001\uff96\000\002\001\uffb1" +
    "\000\004\156\u0281\001\002\000\006\065\u0283\101\262\001" +
    "\002\000\002\001\uffb5\000\022\115\051\160\045\166\053" +
    "\173\044\176\052\177\042\201\050\203\047\001\uff99\000" +
    "\004\101\262\001\002\000\002\001\uffb2\000\004\101\262" +
    "\001\002\000\002\001\uffb0\000\006\042\u0289\102\u028a\001" +
    "\ufffd\000\010\160\057\176\052\203\047\001\002\000\022" +
    "\115\051\160\045\166\053\173\044\176\052\177\042\201" +
    "\050\203\047\001\uff99\000\004\155\u028c\001\002\000\004" +
    "\042\u028d\001\ufffb\000\010\160\057\176\052\203\047\001" +
    "\002\000\002\001\ufffa\000\002\001\ufffc\000\010\101\262" +
    "\102\u029f\106\u029e\001\uffa0\000\004\055\u0292\001\002\000" +
    "\010\160\057\176\052\203\047\001\002\000\010\101\262" +
    "\102\u0296\106\u0295\001\002\000\002\001\uffb6\000\024\052" +
    "\100\053\067\062\071\130\076\146\070\152\101\160\057" +
    "\176\052\203\047\001\uff63\000\024\052\100\053\067\062" +
    "\071\130\076\146\070\152\101\160\057\176\052\203\047" +
    "\001\uff63\000\004\155\u0298\001\002\000\004\101\262\001" +
    "\002\000\002\001\uffb7\000\004\156\u029b\001\002\000\004" +
    "\101\262\001\002\000\002\001\uffb8\000\002\001\uffb9\000" +
    "\024\052\100\053\067\062\071\130\076\146\070\152\101" +
    "\160\057\176\052\203\047\001\uff63\000\024\052\100\053" +
    "\067\062\071\130\076\146\070\152\101\160\057\176\052" +
    "\203\047\001\uff63\000\004\155\u02a1\001\002\000\004\101" +
    "\262\001\002\000\002\001\uffba\000\004\156\u02a4\001\002" +
    "\000\004\101\262\001\002\000\002\001\uffbb\000\012\060" +
    "\u02a7\101\262\102\u02ab\106\u02aa\001\002\000\134\031\127" +
    "\032\156\033\162\034\163\036\133\037\210\044\107\047" +
    "\226\053\242\073\237\074\125\100\200\101\135\103\234" +
    "\104\222\105\165\106\137\113\164\114\231\115\051\116" +
    "\144\125\122\126\166\131\134\132\206\133\146\134\153" +
    "\135\227\136\171\160\216\161\213\166\053\170\174\171" +
    "\223\172\175\173\044\174\212\175\130\176\204\177\042" +
    "\200\145\201\050\203\047\204\161\205\150\001\002\000" +
    "\002\001\uffc4\000\002\001\uffc3\000\012\156\u02b1\160\057" +
    "\176\052\203\047\001\002\000\012\155\u02ad\160\057\176" +
    "\052\203\047\001\002\000\006\052\104\155\u02af\001\002" +
    "\000\006\060\u02a7\101\262\001\002\000\002\001\uffc5\000" +
    "\006\060\u02a7\101\262\001\002\000\002\001\uffc6\000\006" +
    "\060\u02a7\101\262\001\002\000\006\052\104\156\u02b3\001" +
    "\002\000\006\060\u02a7\101\262\001\002\000\002\001\uffc8" +
    "\000\002\001\uffc7\000\002\001\uffc2\000\004\101\u02b8\001" +
    "\002\000\012\154\u02ba\160\057\176\052\203\047\001\002" +
    "\000\006\052\104\154\u02bb\001\002\000\002\001\ufff8\000" +
    "\002\001\ufff9\000\006\050\020\157\025\001\002\000\012" +
    "\101\262\160\057\176\052\203\047\001\002\000\014\067" +
    "\u02c1\101\262\160\057\176\052\203\047\001\uffdb\000\004" +
    "\067\u02c1\001\uffdb\000\004\063\u02e4\001\uffe0\000\006\061" +
    "\u02c2\204\u02c5\001\002\000\004\204\u02db\001\002\000\024" +
    "\100\u02d3\115\u02d9\160\u02d7\166\u02da\173\u02d6\176\052\177" +
    "\u02d4\201\u02d8\203\047\001\002\000\004\052\u02d0\001\uffdc" +
    "\000\032\046\u02c8\051\u02c7\055\u02c9\100\uffcc\115\uffcc\160" +
    "\uffcc\166\uffcc\173\uffcc\176\uffcc\177\uffcc\201\uffcc\203\uffcc" +
    "\001\uffde\000\002\001\uffda\000\004\204\u02d2\001\002\000" +
    "\006\061\u02c2\204\u02cf\001\002\000\004\055\u02ca\001\002" +
    "\000\004\204\u02cb\001\002\000\004\051\u02cc\001\uffcb\000" +
    "\004\204\u02cd\001\002\000\002\001\uffca\000\004\052\u02d0" +
    "\001\uffdd\000\006\051\u02c7\055\u02c9\001\uffcc\000\006\061" +
    "\u02c2\204\u02cf\001\002\000\002\001\uffd9\000\002\001\uffc9" +
    "\000\002\001\uffd6\000\002\001\uffd2\000\002\001\uffd8\000" +
    "\002\001\uffd3\000\004\167\060\001\uffd5\000\002\001\uffd4" +
    "\000\002\001\uffd1\000\002\001\uffd7\000\006\051\u02dc\055" +
    "\u02dd\001\uffd0\000\004\204\u02e2\001\002\000\004\055\u02de" +
    "\001\002\000\004\204\u02df\001\002\000\004\051\u02e0\001" +
    "\uffcf\000\004\204\u02e1\001\002\000\002\001\uffce\000\002" +
    "\001\uffcd\000\002\001\uffe5\000\004\204\u02e5\001\002\000" +
    "\002\001\uffdf\000\004\067\u02c1\001\uffdb\000\004\067\u02c1" +
    "\001\uffdb\000\004\063\u02e4\001\uffe0\000\002\001\uffe1\000" +
    "\004\063\u02e4\001\uffe0\000\002\001\uffe6\000\004\063\u02e4" +
    "\001\uffe0\000\002\001\uffe2\000\012\052\104\060\u02f1\064" +
    "\u02f0\077\u02ef\001\uffa1\000\022\115\051\160\045\166\053" +
    "\173\044\176\052\177\042\201\050\203\047\001\002\000" +
    "\022\115\051\160\045\166\053\173\044\176\052\177\042" +
    "\201\050\203\047\001\002\000\022\115\051\160\045\166" +
    "\053\173\044\176\052\177\042\201\050\203\047\001\002" +
    "\000\004\101\u02f3\001\002\000\024\052\100\053\067\062" +
    "\071\130\076\146\070\152\101\160\057\176\052\203\047" +
    "\001\uff63\000\004\154\u02f5\001\002\000\004\101\262\001" +
    "\uff5d\000\002\001\uffad\000\002\001\uff5c\000\004\147\u02fa" +
    "\001\uffa2\000\002\001\uff95\000\022\115\051\160\045\166" +
    "\053\173\044\176\052\177\042\201\050\203\047\001\002" +
    "\000\002\001\uff94\000\002\001\uffa4\000\004\147\u02fa\001" +
    "\uffa3\000\002\001\uffa5\000\002\001\uffa8\000\004\102\u0301" +
    "\001\uffff\000\012\061\u0303\160\057\176\052\203\047\001" +
    "\002\000\002\001\uff8c\000\010\160\057\176\052\203\047" +
    "\001\002\000\006\052\u0305\155\u0306\001\002\000\012\061" +
    "\u0308\160\057\176\052\203\047\001\002\000\002\001\ufffe" +
    "\000\002\001\uff8a\000\010\160\057\176\052\203\047\001" +
    "\002\000\002\001\uff89\000\002\001\uff8b\000\004\101\262" +
    "\001\002\000\004\101\262\001\002\000\002\001\ufff7\000" +
    "\002\001\ufff5\000\002\001\ufff6\000\014\067\u02c1\101\262" +
    "\160\057\176\052\203\047\001\uffdb\000\004\067\u02c1\001" +
    "\uffdb\000\004\063\u02e4\001\uffe0\000\002\001\uffe7\000\004" +
    "\067\u02c1\001\uffdb\000\004\067\u02c1\001\uffdb\000\004\063" +
    "\u02e4\001\uffe0\000\002\001\uffe3\000\004\063\u02e4\001\uffe0" +
    "\000\002\001\uffe8\000\004\063\u02e4\001\uffe0\000\002\001" +
    "\uffe4\000\004\101\262\001\002\000\004\101\262\001\002" +
    "\000\002\001\ufff4\000\002\001\ufff2\000\002\001\ufff3\000" +
    "\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u031f\000\006\113\003\114\004\001\001\000\002\001" +
    "\001\000\026\012\025\013\014\037\015\051\010\073\006" +
    "\074\012\103\020\105\022\106\023\132\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\u031d\053\u031b" +
    "\054\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\u0310\053\u030f" +
    "\054\045\001\001\000\002\001\001\000\010\031\u030c\053" +
    "\u030a\054\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\u02ff\054\045\001\001\000\006\105\022\106" +
    "\u02fd\001\001\000\010\053\071\054\045\055\u02ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\u02b6\054\045\001\001\000\006\053" +
    "\u02a5\054\045\001\001\000\010\053\u028f\054\045\107\u0290" +
    "\001\001\000\006\053\u0287\054\045\001\001\000\006\053" +
    "\u0270\054\045\001\001\000\010\053\042\054\045\107\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\053\055\054\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\150\002\113\003\112\004\200\005\111\006" +
    "\142\007\141\010\154\011\153\021\117\022\116\023\220" +
    "\024\217\025\167\026\166\030\u025f\031\227\040\110\041" +
    "\107\042\224\043\223\044\235\045\234\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\115\062\114\063" +
    "\214\064\213\065\122\066\120\067\157\070\156\071\125" +
    "\072\123\075\140\076\137\100\172\101\171\107\146\120" +
    "\151\121\150\122\204\123\202\124\232\125\231\126\176" +
    "\127\175\001\001\000\016\014\074\015\072\017\u025a\053" +
    "\071\054\045\055\073\001\001\000\016\014\074\015\072" +
    "\017\076\053\071\054\045\055\073\001\001\000\010\053" +
    "\071\054\045\055\u0255\001\001\000\010\053\071\054\045" +
    "\055\u0250\001\001\000\010\053\071\054\045\055\u024b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\071\054\045\055\u022f\001" +
    "\001\000\002\001\001\000\016\014\074\015\072\017\u0229" +
    "\053\071\054\045\055\073\001\001\000\010\053\071\054" +
    "\045\055\102\001\001\000\010\053\071\054\045\055\u0224" +
    "\001\001\000\002\001\001\000\006\053\u0223\054\045\001" +
    "\001\000\150\002\113\003\112\004\200\005\111\006\142" +
    "\007\141\010\154\011\153\021\117\022\116\023\220\024" +
    "\217\025\167\026\166\030\u0220\031\227\040\110\041\107" +
    "\042\224\043\223\044\235\045\234\046\210\047\206\053" +
    "\216\054\045\057\131\060\130\061\115\062\114\063\214" +
    "\064\213\065\122\066\120\067\157\070\156\071\125\072" +
    "\123\075\140\076\137\100\172\101\171\107\146\120\151" +
    "\121\150\122\204\123\202\124\232\125\231\126\176\127" +
    "\175\001\001\000\150\002\113\003\112\004\200\005\111" +
    "\006\142\007\141\010\154\011\153\021\117\022\116\023" +
    "\220\024\217\025\167\026\166\030\135\031\227\040\110" +
    "\041\107\042\224\043\223\044\235\045\234\046\210\047" +
    "\206\053\216\054\045\057\131\060\130\061\115\062\114" +
    "\063\214\064\213\065\122\066\120\067\157\070\156\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\006\053\u021f\054\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\u020e\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\074\015\u0122\016\u020b\053\071" +
    "\054\045\055\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\004\200\005\u0208\006\142\007\141\021\117\022" +
    "\116\023\220\024\217\031\227\046\210\047\206\053\216" +
    "\054\045\065\u0207\066\340\071\125\072\123\075\140\076" +
    "\137\100\172\101\171\107\146\126\176\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\004\200\005" +
    "\u010b\006\142\007\141\021\117\022\116\023\220\024\217" +
    "\031\227\046\210\047\206\053\216\054\045\065\122\066" +
    "\120\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\u0206\121\u0205\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\112\004\200\005\u0203" +
    "\006\142\007\141\010\154\011\153\021\117\022\116\023" +
    "\220\024\217\031\227\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\u0204\062\u0142\065\122\066\120\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\160\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\014\u01e0\020" +
    "\u01de\021\117\022\116\023\220\024\217\025\167\026\166" +
    "\030\266\031\227\033\267\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\u01e1\054\045" +
    "\055\u01dd\057\131\060\130\061\115\062\114\063\214\064" +
    "\213\065\122\066\120\067\157\070\156\071\125\072\123" +
    "\075\140\076\137\100\172\101\171\107\146\120\151\121" +
    "\150\122\204\123\202\124\232\125\231\126\176\127\175" +
    "\001\001\000\002\001\001\000\150\002\113\003\112\004" +
    "\200\005\111\006\142\007\141\010\154\011\153\021\117" +
    "\022\116\023\220\024\217\025\167\026\166\030\u01d9\031" +
    "\227\040\110\041\107\042\224\043\223\044\235\045\234" +
    "\046\210\047\206\053\216\054\045\057\131\060\130\061" +
    "\115\062\114\063\214\064\213\065\122\066\120\067\157" +
    "\070\156\071\125\072\123\075\140\076\137\100\172\101" +
    "\171\107\146\120\151\121\150\122\204\123\202\124\232" +
    "\125\231\126\176\127\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\004\200\005\u01d3\006\142\007\141\010\154\011\153\021" +
    "\117\022\116\023\220\024\217\031\227\046\210\047\206" +
    "\053\216\054\045\057\u01d4\060\u0167\065\122\066\120\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\022\004\200\005\u01d1\031\227" +
    "\053\216\054\045\107\146\126\u01d2\127\u0101\001\001\000" +
    "\112\004\200\005\u01cf\006\142\007\141\010\154\011\153" +
    "\021\117\022\116\023\220\024\217\031\227\046\210\047" +
    "\206\053\216\054\045\057\131\060\130\061\u01d0\062\u0149" +
    "\065\122\066\120\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\120\151\121\150\122\204\123\202" +
    "\124\232\125\231\126\176\127\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\004\200\005\u01cd\006\142\007\141\010\154\011" +
    "\153\021\117\022\116\023\220\024\217\031\227\046\210" +
    "\047\206\053\216\054\045\057\131\060\130\061\u01ce\062" +
    "\u014a\065\122\066\120\071\125\072\123\075\140\076\137" +
    "\100\172\101\171\107\146\120\151\121\150\122\204\123" +
    "\202\124\232\125\231\126\176\127\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\074\015\u0122\016\u01a0\053" +
    "\071\054\045\055\073\001\001\000\076\004\200\005\u010b" +
    "\006\142\007\141\021\117\022\116\023\220\024\217\031" +
    "\227\046\210\047\206\053\216\054\045\065\122\066\120" +
    "\071\125\072\123\075\140\076\137\100\172\101\171\107" +
    "\146\120\u019f\121\u019e\122\204\123\202\124\232\125\231" +
    "\126\176\127\175\001\001\000\076\004\200\005\u010b\006" +
    "\142\007\141\021\117\022\116\023\220\024\217\031\227" +
    "\046\210\047\206\053\216\054\045\065\122\066\120\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\u019d\121\u019c\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\004\200\005\u0189\006\142\007\141\010\154\011" +
    "\153\021\117\022\116\023\220\024\217\031\227\046\210" +
    "\047\206\053\216\054\045\057\131\060\130\061\u018a\062" +
    "\u014c\065\122\066\120\071\125\072\123\075\140\076\137" +
    "\100\172\101\171\107\146\120\151\121\150\122\204\123" +
    "\202\124\232\125\231\126\176\127\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\014\074\015\u0122\016" +
    "\u0187\053\071\054\045\055\073\001\001\000\022\004\200" +
    "\005\u0185\031\227\053\216\054\045\107\146\126\u0186\127" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\200\005\u0184\006\142\007\141\021\117\022\116\023" +
    "\220\024\217\031\227\046\210\047\206\053\216\054\045" +
    "\065\u0183\066\u0102\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\126\176\127\175\001\001\000\002" +
    "\001\001\000\150\002\113\003\112\004\200\005\111\006" +
    "\142\007\141\010\154\011\153\021\117\022\116\023\220" +
    "\024\217\025\167\026\166\030\u0182\031\227\040\110\041" +
    "\107\042\224\043\223\044\235\045\234\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\115\062\114\063" +
    "\214\064\213\065\122\066\120\067\157\070\156\071\125" +
    "\072\123\075\140\076\137\100\172\101\171\107\146\120" +
    "\151\121\150\122\204\123\202\124\232\125\231\126\176" +
    "\127\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\112\004\200\005\u0178\006\142\007\141" +
    "\010\154\011\153\021\117\022\116\023\220\024\217\031" +
    "\227\046\210\047\206\053\216\054\045\057\131\060\130" +
    "\061\u0179\062\u014b\065\122\066\120\071\125\072\123\075" +
    "\140\076\137\100\172\101\171\107\146\120\151\121\150" +
    "\122\204\123\202\124\232\125\231\126\176\127\175\001" +
    "\001\000\002\001\001\000\016\014\074\015\u0122\016\u0174" +
    "\053\071\054\045\055\073\001\001\000\002\001\001\000" +
    "\016\014\074\015\u0122\016\u0172\053\071\054\045\055\073" +
    "\001\001\000\076\004\200\005\u010b\006\142\007\141\021" +
    "\117\022\116\023\220\024\217\031\227\046\210\047\206" +
    "\053\216\054\045\065\122\066\120\071\125\072\123\075" +
    "\140\076\137\100\172\101\171\107\146\120\u0171\121\u0170" +
    "\122\204\123\202\124\232\125\231\126\176\127\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\004\200" +
    "\005\u010b\006\142\007\141\021\117\022\116\023\220\024" +
    "\217\031\227\046\210\047\206\053\216\054\045\065\122" +
    "\066\120\071\125\072\123\075\140\076\137\100\172\101" +
    "\171\107\146\120\u0129\121\u0128\122\204\123\202\124\232" +
    "\125\231\126\176\127\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\074\015\u0122" +
    "\016\u0123\053\071\054\045\055\073\001\001\000\076\004" +
    "\200\005\u010b\006\142\007\141\021\117\022\116\023\220" +
    "\024\217\031\227\046\210\047\206\053\216\054\045\065" +
    "\122\066\120\071\125\072\123\075\140\076\137\100\172" +
    "\101\171\107\146\120\u0121\121\u0120\122\204\123\202\124" +
    "\232\125\231\126\176\127\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\200\005\u011d\031\227\053" +
    "\216\054\045\107\146\126\u011e\127\347\001\001\000\112" +
    "\004\200\005\u011a\006\142\007\141\010\154\011\153\021" +
    "\117\022\116\023\220\024\217\031\227\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\u011c\062\u011b\065" +
    "\122\066\120\071\125\072\123\075\140\076\137\100\172" +
    "\101\171\107\146\120\151\121\150\122\204\123\202\124" +
    "\232\125\231\126\176\127\175\001\001\000\002\001\001" +
    "\000\076\004\200\005\u010b\006\142\007\141\021\117\022" +
    "\116\023\220\024\217\031\227\046\210\047\206\053\216" +
    "\054\045\065\122\066\120\071\125\072\123\075\140\076" +
    "\137\100\172\101\171\107\146\120\u010a\121\u0109\122\204" +
    "\123\202\124\232\125\231\126\176\127\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\254\053\253" +
    "\054\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\004\200\005\242\006\142\007\141\021\117\022\116" +
    "\023\220\024\217\031\227\046\210\047\206\053\216\054" +
    "\045\065\240\066\237\071\125\072\123\075\140\076\137" +
    "\100\172\101\171\107\146\126\176\127\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\154\002\113\003\112\004" +
    "\200\005\111\006\142\007\141\010\154\011\153\021\117" +
    "\022\116\023\220\024\217\025\167\026\166\030\245\031" +
    "\227\035\246\036\247\040\110\041\107\042\224\043\223" +
    "\044\235\045\234\046\210\047\206\053\216\054\045\057" +
    "\131\060\130\061\115\062\114\063\214\064\213\065\122" +
    "\066\120\067\157\070\156\071\125\072\123\075\140\076" +
    "\137\100\172\101\171\107\146\120\151\121\150\122\204" +
    "\123\202\124\232\125\231\126\176\127\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\251\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\150\002\113\003\112\004\200\005\111" +
    "\006\142\007\141\010\154\011\153\021\117\022\116\023" +
    "\220\024\217\025\167\026\166\030\256\031\227\040\110" +
    "\041\107\042\224\043\223\044\235\045\234\046\210\047" +
    "\206\053\216\054\045\057\131\060\130\061\115\062\114" +
    "\063\214\064\213\065\122\066\120\067\157\070\156\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\006\031\263\034\260\001\001" +
    "\000\010\050\272\053\253\054\045\001\001\000\002\001" +
    "\001\000\152\002\113\003\112\004\200\005\111\006\142" +
    "\007\141\010\154\011\153\021\117\022\116\023\220\024" +
    "\217\025\167\026\166\030\266\031\227\033\267\040\110" +
    "\041\107\042\224\043\223\044\235\045\234\046\210\047" +
    "\206\053\216\054\045\057\131\060\130\061\115\062\114" +
    "\063\214\064\213\065\122\066\120\067\157\070\156\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\150\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\021\117\022" +
    "\116\023\220\024\217\025\167\026\166\030\264\031\227" +
    "\040\110\041\107\042\224\043\223\044\235\045\234\046" +
    "\210\047\206\053\216\054\045\057\131\060\130\061\115" +
    "\062\114\063\214\064\213\065\122\066\120\067\157\070" +
    "\156\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\151\121\150\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\150\002" +
    "\113\003\112\004\200\005\111\006\142\007\141\010\154" +
    "\011\153\021\117\022\116\023\220\024\217\025\167\026" +
    "\166\030\271\031\227\040\110\041\107\042\224\043\223" +
    "\044\235\045\234\046\210\047\206\053\216\054\045\057" +
    "\131\060\130\061\115\062\114\063\214\064\213\065\122" +
    "\066\120\067\157\070\156\071\125\072\123\075\140\076" +
    "\137\100\172\101\171\107\146\120\151\121\150\122\204" +
    "\123\202\124\232\125\231\126\176\127\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\200\005\u0108\007\310\022\304\024\217\031\227\047" +
    "\277\053\216\054\045\066\120\072\305\076\312\101\171" +
    "\107\146\123\u0107\127\175\001\001\000\042\004\200\005" +
    "\u0106\007\310\022\304\024\217\031\227\047\277\053\216" +
    "\054\045\066\120\072\305\076\312\101\171\107\146\123" +
    "\u0105\127\175\001\001\000\042\004\200\005\u0104\007\310" +
    "\022\304\024\217\031\227\047\277\053\216\054\045\066" +
    "\120\072\305\076\312\101\171\107\146\123\u0103\127\175" +
    "\001\001\000\042\004\200\005\313\007\310\022\304\024" +
    "\217\031\227\047\277\053\216\054\045\066\120\072\305" +
    "\076\312\101\171\107\146\123\307\127\175\001\001\000" +
    "\002\001\001\000\036\004\200\007\310\022\304\024\217" +
    "\031\227\047\277\053\216\054\045\066\237\072\305\076" +
    "\312\101\171\107\146\127\175\001\001\000\036\004\200" +
    "\007\310\022\304\024\217\031\227\047\277\053\216\054" +
    "\045\066\u0102\072\305\076\312\101\171\107\146\127\175" +
    "\001\001\000\016\004\200\031\227\053\216\054\045\107" +
    "\146\127\u0101\001\001\000\016\004\200\031\227\053\216" +
    "\054\045\107\146\127\u0100\001\001\000\004\077\372\001" +
    "\001\000\002\001\001\000\016\004\200\031\227\053\216" +
    "\054\045\107\146\127\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\200\007\310\022\304\024\217" +
    "\031\227\047\277\053\216\054\045\066\340\072\305\076" +
    "\312\101\171\107\146\127\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\004\200\007\317\024\217\031" +
    "\227\053\216\054\045\107\146\127\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\154\002" +
    "\113\003\112\004\200\005\111\006\142\007\141\010\154" +
    "\011\153\021\117\022\116\023\220\024\217\025\167\026" +
    "\166\030\245\031\227\035\330\036\247\040\110\041\107" +
    "\042\224\043\223\044\235\045\234\046\210\047\206\053" +
    "\216\054\045\057\131\060\130\061\115\062\114\063\214" +
    "\064\213\065\122\066\120\067\157\070\156\071\125\072" +
    "\123\075\140\076\137\100\172\101\171\107\146\120\151" +
    "\121\150\122\204\123\202\124\232\125\231\126\176\127" +
    "\175\001\001\000\016\004\200\031\227\053\216\054\045" +
    "\107\146\127\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\154\002\113\003\112\004\200\005\111\006\142\007\141" +
    "\010\154\011\153\021\117\022\116\023\220\024\217\025" +
    "\167\026\166\030\245\031\227\035\333\036\247\040\110" +
    "\041\107\042\224\043\223\044\235\045\234\046\210\047" +
    "\206\053\216\054\045\057\131\060\130\061\115\062\114" +
    "\063\214\064\213\065\122\066\120\067\157\070\156\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\154\002\113\003\112\004\200\005\111\006\142\007" +
    "\141\010\154\011\153\021\117\022\116\023\220\024\217" +
    "\025\167\026\166\030\245\031\227\035\336\036\247\040" +
    "\110\041\107\042\224\043\223\044\235\045\234\046\210" +
    "\047\206\053\216\054\045\057\131\060\130\061\115\062" +
    "\114\063\214\064\213\065\122\066\120\067\157\070\156" +
    "\071\125\072\123\075\140\076\137\100\172\101\171\107" +
    "\146\120\151\121\150\122\204\123\202\124\232\125\231" +
    "\126\176\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\200\007\310\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\066\346\072" +
    "\305\076\312\101\171\107\146\127\175\001\001\000\036" +
    "\004\200\007\310\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\066\345\072\305\076\312\101\171\107\146" +
    "\127\175\001\001\000\036\004\200\007\310\022\304\024" +
    "\217\031\227\047\277\053\216\054\045\066\344\072\305" +
    "\076\312\101\171\107\146\127\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\200\007\310\022\304\024\217\031\227\047" +
    "\351\053\216\054\045\076\312\101\171\107\146\127\175" +
    "\001\001\000\002\001\001\000\030\004\200\007\310\022" +
    "\304\024\217\031\227\053\216\054\045\076\312\101\353" +
    "\107\146\127\175\001\001\000\002\001\001\000\024\004" +
    "\200\007\310\024\217\031\227\053\216\054\045\076\377" +
    "\107\146\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\200\007\310\022" +
    "\304\024\217\031\227\053\216\054\045\076\312\101\376" +
    "\107\146\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\200" +
    "\005\u0119\007\310\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\066\120\072\305\076\312\101\171\107\146" +
    "\123\u010f\125\u0118\127\175\001\001\000\044\004\200\005" +
    "\u0117\007\310\022\304\024\217\031\227\047\277\053\216" +
    "\054\045\066\120\072\305\076\312\101\171\107\146\123" +
    "\u010f\125\u0116\127\175\001\001\000\044\004\200\005\u0111" +
    "\007\310\022\304\024\217\031\227\047\277\053\216\054" +
    "\045\066\120\072\305\076\312\101\171\107\146\123\u010f" +
    "\125\u0110\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\200\007\310\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\066\120\072" +
    "\305\076\312\101\171\107\146\123\u0107\127\175\001\001" +
    "\000\040\004\200\007\310\022\304\024\217\031\227\047" +
    "\277\053\216\054\045\066\120\072\305\076\312\101\171" +
    "\107\146\123\u0105\127\175\001\001\000\040\004\200\007" +
    "\310\022\304\024\217\031\227\047\277\053\216\054\045" +
    "\066\120\072\305\076\312\101\171\107\146\123\u0103\127" +
    "\175\001\001\000\040\004\200\007\310\022\304\024\217" +
    "\031\227\047\277\053\216\054\045\066\120\072\305\076" +
    "\312\101\171\107\146\123\307\127\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\263\034\u0125\001\001\000\014\014\074\015\u0126\053" +
    "\071\054\045\055\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\200\005\u016f" +
    "\007\310\011\u0133\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\060\130\062\u016e\066\120\072\305\076\312" +
    "\101\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001" +
    "\001\000\054\004\200\005\u016d\007\310\011\u0133\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\060\130\062" +
    "\u016c\066\120\072\305\076\312\101\171\107\146\121\u0132" +
    "\123\u010f\125\u0136\127\175\001\001\000\054\004\200\005" +
    "\u016b\007\310\011\u0133\022\304\024\217\031\227\047\277" +
    "\053\216\054\045\060\130\062\u016a\066\120\072\305\076" +
    "\312\101\171\107\146\121\u0132\123\u010f\125\u0136\127\175" +
    "\001\001\000\054\004\200\005\u0140\007\310\011\u0133\022" +
    "\304\024\217\031\227\047\277\053\216\054\045\060\130" +
    "\062\u0134\066\120\072\305\076\312\101\171\107\146\121" +
    "\u0132\123\u010f\125\u0136\127\175\001\001\000\044\004\200" +
    "\007\310\022\304\024\217\031\227\047\277\053\216\054" +
    "\045\066\120\072\305\076\312\101\171\107\146\121\u0169" +
    "\123\u010f\125\u0136\127\175\001\001\000\044\004\200\007" +
    "\310\022\304\024\217\031\227\047\277\053\216\054\045" +
    "\066\120\072\305\076\312\101\171\107\146\121\u0168\123" +
    "\u010f\125\u0136\127\175\001\001\000\050\004\200\007\310" +
    "\011\u0133\022\304\024\217\031\227\047\277\053\216\054" +
    "\045\060\u0167\066\120\072\305\076\312\101\171\107\146" +
    "\121\u0132\123\u010f\125\u0136\127\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\200" +
    "\007\310\011\u0133\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\060\130\062\u011b\066\120\072\305\076\312" +
    "\101\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001" +
    "\001\000\002\001\001\000\044\004\200\007\310\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\066\120\072" +
    "\305\076\312\101\171\107\146\121\u014e\123\u010f\125\u0136" +
    "\127\175\001\001\000\044\004\200\007\310\022\304\024" +
    "\217\031\227\047\277\053\216\054\045\066\120\072\305" +
    "\076\312\101\171\107\146\121\u014d\123\u010f\125\u0136\127" +
    "\175\001\001\000\052\004\200\007\310\011\u0133\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\060\130\062" +
    "\u014c\066\120\072\305\076\312\101\171\107\146\121\u0132" +
    "\123\u010f\125\u0136\127\175\001\001\000\052\004\200\007" +
    "\310\011\u0133\022\304\024\217\031\227\047\277\053\216" +
    "\054\045\060\130\062\u014b\066\120\072\305\076\312\101" +
    "\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001\001" +
    "\000\052\004\200\007\310\011\u0133\022\304\024\217\031" +
    "\227\047\277\053\216\054\045\060\130\062\u014a\066\120" +
    "\072\305\076\312\101\171\107\146\121\u0132\123\u010f\125" +
    "\u0136\127\175\001\001\000\052\004\200\007\310\011\u0133" +
    "\022\304\024\217\031\227\047\277\053\216\054\045\060" +
    "\130\062\u0149\066\120\072\305\076\312\101\171\107\146" +
    "\121\u0132\123\u010f\125\u0136\127\175\001\001\000\044\004" +
    "\200\007\310\022\304\024\217\031\227\047\277\053\216" +
    "\054\045\066\120\072\305\076\312\101\171\107\146\121" +
    "\u0148\123\u010f\125\u0136\127\175\001\001\000\044\004\200" +
    "\007\310\022\304\024\217\031\227\047\277\053\216\054" +
    "\045\066\120\072\305\076\312\101\171\107\146\121\u0147" +
    "\123\u010f\125\u0136\127\175\001\001\000\044\004\200\007" +
    "\310\022\304\024\217\031\227\047\277\053\216\054\045" +
    "\066\120\072\305\076\312\101\171\107\146\121\u0143\123" +
    "\u010f\125\u0136\127\175\001\001\000\002\001\001\000\052" +
    "\004\200\007\310\011\u0133\022\304\024\217\031\227\047" +
    "\277\053\216\054\045\060\130\062\u0142\066\120\072\305" +
    "\076\312\101\171\107\146\121\u0132\123\u010f\125\u0136\127" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\200\007\310\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\066\120\072\305\076\312\101\171\107\146" +
    "\123\u010f\125\u0118\127\175\001\001\000\042\004\200\007" +
    "\310\022\304\024\217\031\227\047\277\053\216\054\045" +
    "\066\120\072\305\076\312\101\171\107\146\123\u010f\125" +
    "\u0116\127\175\001\001\000\042\004\200\007\310\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\066\120\072" +
    "\305\076\312\101\171\107\146\123\u010f\125\u0110\127\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\200\007" +
    "\310\022\304\024\217\031\227\047\277\053\216\054\045" +
    "\066\120\072\305\076\312\101\171\107\146\121\u0166\123" +
    "\u010f\125\u0136\127\175\001\001\000\044\004\200\007\310" +
    "\022\304\024\217\031\227\047\277\053\216\054\045\066" +
    "\120\072\305\076\312\101\171\107\146\121\u0165\123\u010f" +
    "\125\u0136\127\175\001\001\000\044\004\200\007\310\022" +
    "\304\024\217\031\227\047\277\053\216\054\045\066\120" +
    "\072\305\076\312\101\171\107\146\121\u0164\123\u010f\125" +
    "\u0136\127\175\001\001\000\044\004\200\007\310\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\066\120\072" +
    "\305\076\312\101\171\107\146\121\u0163\123\u010f\125\u0136" +
    "\127\175\001\001\000\044\004\200\007\310\022\304\024" +
    "\217\031\227\047\277\053\216\054\045\066\120\072\305" +
    "\076\312\101\171\107\146\121\u0162\123\u010f\125\u0136\127" +
    "\175\001\001\000\044\004\200\007\310\022\304\024\217" +
    "\031\227\047\277\053\216\054\045\066\120\072\305\076" +
    "\312\101\171\107\146\121\u0161\123\u010f\125\u0136\127\175" +
    "\001\001\000\044\004\200\007\310\022\304\024\217\031" +
    "\227\047\277\053\216\054\045\066\120\072\305\076\312" +
    "\101\171\107\146\121\u0160\123\u010f\125\u0136\127\175\001" +
    "\001\000\044\004\200\007\310\022\304\024\217\031\227" +
    "\047\277\053\216\054\045\066\120\072\305\076\312\101" +
    "\171\107\146\121\u015f\123\u010f\125\u0136\127\175\001\001" +
    "\000\044\004\200\007\310\022\304\024\217\031\227\047" +
    "\277\053\216\054\045\066\120\072\305\076\312\101\171" +
    "\107\146\121\u015e\123\u010f\125\u0136\127\175\001\001\000" +
    "\044\004\200\007\310\022\304\024\217\031\227\047\277" +
    "\053\216\054\045\066\120\072\305\076\312\101\171\107" +
    "\146\121\u015d\123\u010f\125\u0136\127\175\001\001\000\044" +
    "\004\200\007\310\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\066\120\072\305\076\312\101\171\107\146" +
    "\121\u015c\123\u010f\125\u0136\127\175\001\001\000\044\004" +
    "\200\007\310\022\304\024\217\031\227\047\277\053\216" +
    "\054\045\066\120\072\305\076\312\101\171\107\146\121" +
    "\u015b\123\u010f\125\u0136\127\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\263\034\u0173\001\001\000\002\001\001\000\006\031\263" +
    "\034\u0175\001\001\000\002\001\001\000\032\004\200\005" +
    "\u0177\007\310\022\304\024\217\031\227\053\216\054\045" +
    "\076\312\101\353\107\146\127\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\u017b" +
    "\001\001\000\002\001\001\000\040\004\200\005\u0181\007" +
    "\310\022\304\024\217\031\227\047\277\053\216\054\045" +
    "\066\346\072\305\076\312\101\171\107\146\127\175\001" +
    "\001\000\040\004\200\005\u0180\007\310\022\304\024\217" +
    "\031\227\047\277\053\216\054\045\066\345\072\305\076" +
    "\312\101\171\107\146\127\175\001\001\000\040\004\200" +
    "\005\u017f\007\310\022\304\024\217\031\227\047\277\053" +
    "\216\054\045\066\344\072\305\076\312\101\171\107\146" +
    "\127\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\263\034\u0188\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\066\003\u018c\004\200\005\u018f\007" +
    "\310\011\u0133\022\304\024\217\031\227\041\u018d\043\223" +
    "\045\234\047\277\053\216\054\045\060\130\062\114\064" +
    "\u018e\066\120\072\305\076\312\101\171\107\146\121\u0132" +
    "\123\u010f\125\u0136\127\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\004\200\007\310\011\u0133\022\304\024\217\031\227\047" +
    "\277\053\216\054\045\060\130\062\u016e\066\120\072\305" +
    "\076\312\101\171\107\146\121\u0132\123\u010f\125\u0136\127" +
    "\175\001\001\000\052\004\200\007\310\011\u0133\022\304" +
    "\024\217\031\227\047\277\053\216\054\045\060\130\062" +
    "\u016a\066\120\072\305\076\312\101\171\107\146\121\u0132" +
    "\123\u010f\125\u0136\127\175\001\001\000\052\004\200\007" +
    "\310\011\u0133\022\304\024\217\031\227\047\277\053\216" +
    "\054\045\060\130\062\u016c\066\120\072\305\076\312\101" +
    "\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001\001" +
    "\000\052\004\200\007\310\011\u0133\022\304\024\217\031" +
    "\227\047\277\053\216\054\045\060\130\062\u0134\066\120" +
    "\072\305\076\312\101\171\107\146\121\u0132\123\u010f\125" +
    "\u0136\127\175\001\001\000\064\003\u018c\004\200\007\310" +
    "\011\u0133\022\304\024\217\031\227\041\u0197\043\u0198\045" +
    "\234\047\277\053\216\054\045\060\130\062\114\064\u018e" +
    "\066\120\072\305\076\312\101\171\107\146\121\u0132\123" +
    "\u010f\125\u0136\127\175\001\001\000\054\004\200\007\310" +
    "\011\u0133\022\304\024\217\031\227\047\277\053\216\054" +
    "\045\060\130\062\114\064\u0196\066\120\072\305\076\312" +
    "\101\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u018c\004\200\007\310\011\u0133\022\304\024" +
    "\217\031\227\043\u019b\045\u019a\047\277\053\216\054\045" +
    "\060\130\062\114\064\u018e\066\120\072\305\076\312\101" +
    "\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\263\034\u01a1\001\001\000\002\001\001\000\154\002" +
    "\113\003\112\004\200\005\111\006\142\007\141\010\154" +
    "\011\153\021\117\022\116\023\220\024\217\025\167\026" +
    "\166\030\245\031\227\035\u01a3\036\247\040\110\041\107" +
    "\042\224\043\223\044\235\045\234\046\210\047\206\053" +
    "\216\054\045\057\131\060\130\061\115\062\114\063\214" +
    "\064\213\065\122\066\120\067\157\070\156\071\125\072" +
    "\123\075\140\076\137\100\172\101\171\107\146\120\151" +
    "\121\150\122\204\123\202\124\232\125\231\126\176\127" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\u018c\004\200\005\u01a6\007\310\011\u0133\022\304\024" +
    "\217\026\u01a7\031\227\041\107\043\223\045\234\047\277" +
    "\053\216\054\045\060\130\062\114\064\u018e\066\120\072" +
    "\305\076\312\101\171\107\146\121\u0132\123\u010f\125\u0136" +
    "\127\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\u018c\004\200\007\310\011\u0133\022\304\024\217" +
    "\031\227\041\u018d\043\223\045\234\047\277\053\216\054" +
    "\045\060\130\062\114\064\u018e\066\120\072\305\076\312" +
    "\101\171\107\146\121\u0132\123\u010f\125\u0136\127\175\001" +
    "\001\000\076\004\200\005\u010b\006\142\007\141\021\117" +
    "\022\116\023\220\024\217\031\227\046\210\047\206\053" +
    "\216\054\045\065\122\066\120\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\u01cc\121\u01cb\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\076\004\200\005\u010b\006\142\007\141\021\117\022" +
    "\116\023\220\024\217\031\227\046\210\047\206\053\216" +
    "\054\045\065\122\066\120\071\125\072\123\075\140\076" +
    "\137\100\172\101\171\107\146\120\u01ca\121\u01c9\122\204" +
    "\123\202\124\232\125\231\126\176\127\175\001\001\000" +
    "\076\004\200\005\u010b\006\142\007\141\021\117\022\116" +
    "\023\220\024\217\031\227\046\210\047\206\053\216\054" +
    "\045\065\122\066\120\071\125\072\123\075\140\076\137" +
    "\100\172\101\171\107\146\120\u01c8\121\u01c7\122\204\123" +
    "\202\124\232\125\231\126\176\127\175\001\001\000\076" +
    "\004\200\005\u010b\006\142\007\141\021\117\022\116\023" +
    "\220\024\217\031\227\046\210\047\206\053\216\054\045" +
    "\065\122\066\120\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\120\u01c6\121\u01c5\122\204\123\202" +
    "\124\232\125\231\126\176\127\175\001\001\000\076\004" +
    "\200\005\u010b\006\142\007\141\021\117\022\116\023\220" +
    "\024\217\031\227\046\210\047\206\053\216\054\045\065" +
    "\122\066\120\071\125\072\123\075\140\076\137\100\172" +
    "\101\171\107\146\120\u01c4\121\u01c3\122\204\123\202\124" +
    "\232\125\231\126\176\127\175\001\001\000\076\004\200" +
    "\005\u010b\006\142\007\141\021\117\022\116\023\220\024" +
    "\217\031\227\046\210\047\206\053\216\054\045\065\122" +
    "\066\120\071\125\072\123\075\140\076\137\100\172\101" +
    "\171\107\146\120\u01c2\121\u01c1\122\204\123\202\124\232" +
    "\125\231\126\176\127\175\001\001\000\076\004\200\005" +
    "\u010b\006\142\007\141\021\117\022\116\023\220\024\217" +
    "\031\227\046\210\047\206\053\216\054\045\065\122\066" +
    "\120\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\u01c0\121\u01bf\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\076\004\200\005\u010b" +
    "\006\142\007\141\021\117\022\116\023\220\024\217\031" +
    "\227\046\210\047\206\053\216\054\045\065\122\066\120" +
    "\071\125\072\123\075\140\076\137\100\172\101\171\107" +
    "\146\120\u01be\121\u01bd\122\204\123\202\124\232\125\231" +
    "\126\176\127\175\001\001\000\076\004\200\005\u010b\006" +
    "\142\007\141\021\117\022\116\023\220\024\217\031\227" +
    "\046\210\047\206\053\216\054\045\065\122\066\120\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\u01bc\121\u01bb\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\076\004\200\005\u010b\006\142" +
    "\007\141\021\117\022\116\023\220\024\217\031\227\046" +
    "\210\047\206\053\216\054\045\065\122\066\120\071\125" +
    "\072\123\075\140\076\137\100\172\101\171\107\146\120" +
    "\u01ba\121\u01b9\122\204\123\202\124\232\125\231\126\176" +
    "\127\175\001\001\000\076\004\200\005\u010b\006\142\007" +
    "\141\021\117\022\116\023\220\024\217\031\227\046\210" +
    "\047\206\053\216\054\045\065\122\066\120\071\125\072" +
    "\123\075\140\076\137\100\172\101\171\107\146\120\u01b8" +
    "\121\u01b7\122\204\123\202\124\232\125\231\126\176\127" +
    "\175\001\001\000\076\004\200\005\u010b\006\142\007\141" +
    "\021\117\022\116\023\220\024\217\031\227\046\210\047" +
    "\206\053\216\054\045\065\122\066\120\071\125\072\123" +
    "\075\140\076\137\100\172\101\171\107\146\120\u01b6\121" +
    "\u01b5\122\204\123\202\124\232\125\231\126\176\127\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\200\005\u01d6\031\227\053\216\054\045\107" +
    "\146\127\326\001\001\000\002\001\001\000\024\004\200" +
    "\005\u01d8\007\317\024\217\031\227\053\216\054\045\107" +
    "\146\127\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\071\054\045\055\u01fe\001" +
    "\001\000\010\053\071\054\045\055\u01f9\001\001\000\002" +
    "\001\001\000\006\031\263\034\u01f0\001\001\000\010\053" +
    "\071\054\045\055\u01ea\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\071\054\045\055\u01e4\001\001\000" +
    "\010\053\071\054\045\055\u01e5\001\001\000\002\001\001" +
    "\000\002\001\001\000\150\002\113\003\112\004\200\005" +
    "\111\006\142\007\141\010\154\011\153\021\117\022\116" +
    "\023\220\024\217\025\167\026\166\030\u01e7\031\227\040" +
    "\110\041\107\042\224\043\223\044\235\045\234\046\210" +
    "\047\206\053\216\054\045\057\131\060\130\061\115\062" +
    "\114\063\214\064\213\065\122\066\120\067\157\070\156" +
    "\071\125\072\123\075\140\076\137\100\172\101\171\107" +
    "\146\120\151\121\150\122\204\123\202\124\232\125\231" +
    "\126\176\127\175\001\001\000\002\001\001\000\150\002" +
    "\113\003\112\004\200\005\111\006\142\007\141\010\154" +
    "\011\153\021\117\022\116\023\220\024\217\025\167\026" +
    "\166\030\u01e9\031\227\040\110\041\107\042\224\043\223" +
    "\044\235\045\234\046\210\047\206\053\216\054\045\057" +
    "\131\060\130\061\115\062\114\063\214\064\213\065\122" +
    "\066\120\067\157\070\156\071\125\072\123\075\140\076" +
    "\137\100\172\101\171\107\146\120\151\121\150\122\204" +
    "\123\202\124\232\125\231\126\176\127\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\150\002\113\003\112" +
    "\004\200\005\111\006\142\007\141\010\154\011\153\021" +
    "\117\022\116\023\220\024\217\025\167\026\166\030\u01ec" +
    "\031\227\040\110\041\107\042\224\043\223\044\235\045" +
    "\234\046\210\047\206\053\216\054\045\057\131\060\130" +
    "\061\115\062\114\063\214\064\213\065\122\066\120\067" +
    "\157\070\156\071\125\072\123\075\140\076\137\100\172" +
    "\101\171\107\146\120\151\121\150\122\204\123\202\124" +
    "\232\125\231\126\176\127\175\001\001\000\002\001\001" +
    "\000\150\002\113\003\112\004\200\005\111\006\142\007" +
    "\141\010\154\011\153\021\117\022\116\023\220\024\217" +
    "\025\167\026\166\030\u01ee\031\227\040\110\041\107\042" +
    "\224\043\223\044\235\045\234\046\210\047\206\053\216" +
    "\054\045\057\131\060\130\061\115\062\114\063\214\064" +
    "\213\065\122\066\120\067\157\070\156\071\125\072\123" +
    "\075\140\076\137\100\172\101\171\107\146\120\151\121" +
    "\150\122\204\123\202\124\232\125\231\126\176\127\175" +
    "\001\001\000\002\001\001\000\012\014\u01f4\053\071\054" +
    "\045\055\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\053\071\054\045\055\u01ea\001" +
    "\001\000\002\001\001\000\150\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\021\117\022" +
    "\116\023\220\024\217\025\167\026\166\030\u01f6\031\227" +
    "\040\110\041\107\042\224\043\223\044\235\045\234\046" +
    "\210\047\206\053\216\054\045\057\131\060\130\061\115" +
    "\062\114\063\214\064\213\065\122\066\120\067\157\070" +
    "\156\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\151\121\150\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\002\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\u01f8\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\150\002\113\003" +
    "\112\004\200\005\111\006\142\007\141\010\154\011\153" +
    "\021\117\022\116\023\220\024\217\025\167\026\166\030" +
    "\u01fb\031\227\040\110\041\107\042\224\043\223\044\235" +
    "\045\234\046\210\047\206\053\216\054\045\057\131\060" +
    "\130\061\115\062\114\063\214\064\213\065\122\066\120" +
    "\067\157\070\156\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\120\151\121\150\122\204\123\202" +
    "\124\232\125\231\126\176\127\175\001\001\000\002\001" +
    "\001\000\150\002\113\003\112\004\200\005\111\006\142" +
    "\007\141\010\154\011\153\021\117\022\116\023\220\024" +
    "\217\025\167\026\166\030\u01fd\031\227\040\110\041\107" +
    "\042\224\043\223\044\235\045\234\046\210\047\206\053" +
    "\216\054\045\057\131\060\130\061\115\062\114\063\214" +
    "\064\213\065\122\066\120\067\157\070\156\071\125\072" +
    "\123\075\140\076\137\100\172\101\171\107\146\120\151" +
    "\121\150\122\204\123\202\124\232\125\231\126\176\127" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\u0200\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\150\002\113\003\112\004\200\005" +
    "\111\006\142\007\141\010\154\011\153\021\117\022\116" +
    "\023\220\024\217\025\167\026\166\030\u0202\031\227\040" +
    "\110\041\107\042\224\043\223\044\235\045\234\046\210" +
    "\047\206\053\216\054\045\057\131\060\130\061\115\062" +
    "\114\063\214\064\213\065\122\066\120\067\157\070\156" +
    "\071\125\072\123\075\140\076\137\100\172\101\171\107" +
    "\146\120\151\121\150\122\204\123\202\124\232\125\231" +
    "\126\176\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\200\005" +
    "\u020a\007\310\022\304\024\217\031\227\047\351\053\216" +
    "\054\045\076\312\101\171\107\146\127\175\001\001\000" +
    "\002\001\001\000\006\031\263\034\u020c\001\001\000\002" +
    "\001\001\000\026\004\200\005\u0210\007\310\024\217\031" +
    "\227\053\216\054\045\076\377\107\146\127\175\001\001" +
    "\000\032\004\200\005\u020f\007\310\022\304\024\217\031" +
    "\227\053\216\054\045\076\312\101\376\107\146\127\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\004" +
    "\200\007\310\011\u0133\022\304\024\217\031\227\047\277" +
    "\053\216\054\045\060\130\062\114\064\u0212\066\120\072" +
    "\305\076\312\101\171\107\146\121\u0132\123\u010f\125\u0136" +
    "\127\175\001\001\000\002\001\001\000\136\002\113\003" +
    "\112\004\200\005\u0217\006\142\007\141\010\154\011\153" +
    "\021\117\022\116\023\220\024\217\031\227\040\u0216\041" +
    "\u0197\042\224\043\u0218\044\235\045\234\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\115\062\114\063" +
    "\214\064\213\065\122\066\120\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\056\004\200\005\u0215\007\310\011\u0133\022\304\024" +
    "\217\031\227\047\277\053\216\054\045\060\130\062\114" +
    "\064\u0196\066\120\072\305\076\312\101\171\107\146\121" +
    "\u0132\123\u010f\125\u0136\127\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\132\002\113\003\112\004\200\005\u021a\006\142\007\141" +
    "\010\154\011\153\021\117\022\116\023\220\024\217\031" +
    "\227\042\u021b\043\u019b\044\u021c\045\u019a\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\115\062\114\063" +
    "\214\064\213\065\122\066\120\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\200\007\310\011\u0133\022\304\024\217\031\227" +
    "\047\277\053\216\054\045\060\130\062\114\064\u021e\066" +
    "\120\072\305\076\312\101\171\107\146\121\u0132\123\u010f" +
    "\125\u0136\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\150\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\021\117\022" +
    "\116\023\220\024\217\025\167\026\166\030\u0222\031\227" +
    "\040\110\041\107\042\224\043\223\044\235\045\234\046" +
    "\210\047\206\053\216\054\045\057\131\060\130\061\115" +
    "\062\114\063\214\064\213\065\122\066\120\067\157\070" +
    "\156\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\151\121\150\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\150\002\113\003\112\004" +
    "\200\005\111\006\142\007\141\010\154\011\153\021\117" +
    "\022\116\023\220\024\217\025\167\026\166\030\u0226\031" +
    "\227\040\110\041\107\042\224\043\223\044\235\045\234" +
    "\046\210\047\206\053\216\054\045\057\131\060\130\061" +
    "\115\062\114\063\214\064\213\065\122\066\120\067\157" +
    "\070\156\071\125\072\123\075\140\076\137\100\172\101" +
    "\171\107\146\120\151\121\150\122\204\123\202\124\232" +
    "\125\231\126\176\127\175\001\001\000\002\001\001\000" +
    "\150\002\113\003\112\004\200\005\111\006\142\007\141" +
    "\010\154\011\153\021\117\022\116\023\220\024\217\025" +
    "\167\026\166\030\u0228\031\227\040\110\041\107\042\224" +
    "\043\223\044\235\045\234\046\210\047\206\053\216\054" +
    "\045\057\131\060\130\061\115\062\114\063\214\064\213" +
    "\065\122\066\120\067\157\070\156\071\125\072\123\075" +
    "\140\076\137\100\172\101\171\107\146\120\151\121\150" +
    "\122\204\123\202\124\232\125\231\126\176\127\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\150\002\113\003\112\004\200\005\111\006\142\007" +
    "\141\010\154\011\153\021\117\022\116\023\220\024\217" +
    "\025\167\026\166\030\u022c\031\227\040\110\041\107\042" +
    "\224\043\223\044\235\045\234\046\210\047\206\053\216" +
    "\054\045\057\131\060\130\061\115\062\114\063\214\064" +
    "\213\065\122\066\120\067\157\070\156\071\125\072\123" +
    "\075\140\076\137\100\172\101\171\107\146\120\151\121" +
    "\150\122\204\123\202\124\232\125\231\126\176\127\175" +
    "\001\001\000\004\031\u022d\001\001\000\002\001\001\000" +
    "\010\053\071\054\045\055\u0240\001\001\000\002\001\001" +
    "\000\010\053\071\054\045\055\u0232\001\001\000\010\053" +
    "\071\054\045\055\u0237\001\001\000\002\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\u0234\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\150\002\113\003\112\004\200\005" +
    "\111\006\142\007\141\010\154\011\153\021\117\022\116" +
    "\023\220\024\217\025\167\026\166\030\u0236\031\227\040" +
    "\110\041\107\042\224\043\223\044\235\045\234\046\210" +
    "\047\206\053\216\054\045\057\131\060\130\061\115\062" +
    "\114\063\214\064\213\065\122\066\120\067\157\070\156" +
    "\071\125\072\123\075\140\076\137\100\172\101\171\107" +
    "\146\120\151\121\150\122\204\123\202\124\232\125\231" +
    "\126\176\127\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\150\002\113\003\112\004\200\005\111\006\142" +
    "\007\141\010\154\011\153\021\117\022\116\023\220\024" +
    "\217\025\167\026\166\030\u0239\031\227\040\110\041\107" +
    "\042\224\043\223\044\235\045\234\046\210\047\206\053" +
    "\216\054\045\057\131\060\130\061\115\062\114\063\214" +
    "\064\213\065\122\066\120\067\157\070\156\071\125\072" +
    "\123\075\140\076\137\100\172\101\171\107\146\120\151" +
    "\121\150\122\204\123\202\124\232\125\231\126\176\127" +
    "\175\001\001\000\002\001\001\000\150\002\113\003\112" +
    "\004\200\005\111\006\142\007\141\010\154\011\153\021" +
    "\117\022\116\023\220\024\217\025\167\026\166\030\u023b" +
    "\031\227\040\110\041\107\042\224\043\223\044\235\045" +
    "\234\046\210\047\206\053\216\054\045\057\131\060\130" +
    "\061\115\062\114\063\214\064\213\065\122\066\120\067" +
    "\157\070\156\071\125\072\123\075\140\076\137\100\172" +
    "\101\171\107\146\120\151\121\150\122\204\123\202\124" +
    "\232\125\231\126\176\127\175\001\001\000\002\001\001" +
    "\000\150\002\113\003\112\004\200\005\111\006\142\007" +
    "\141\010\154\011\153\021\117\022\116\023\220\024\217" +
    "\025\167\026\166\030\u023d\031\227\040\110\041\107\042" +
    "\224\043\223\044\235\045\234\046\210\047\206\053\216" +
    "\054\045\057\131\060\130\061\115\062\114\063\214\064" +
    "\213\065\122\066\120\067\157\070\156\071\125\072\123" +
    "\075\140\076\137\100\172\101\171\107\146\120\151\121" +
    "\150\122\204\123\202\124\232\125\231\126\176\127\175" +
    "\001\001\000\002\001\001\000\150\002\113\003\112\004" +
    "\200\005\111\006\142\007\141\010\154\011\153\021\117" +
    "\022\116\023\220\024\217\025\167\026\166\030\u023f\031" +
    "\227\040\110\041\107\042\224\043\223\044\235\045\234" +
    "\046\210\047\206\053\216\054\045\057\131\060\130\061" +
    "\115\062\114\063\214\064\213\065\122\066\120\067\157" +
    "\070\156\071\125\072\123\075\140\076\137\100\172\101" +
    "\171\107\146\120\151\121\150\122\204\123\202\124\232" +
    "\125\231\126\176\127\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\150\002\113\003\112\004\200\005\111" +
    "\006\142\007\141\010\154\011\153\021\117\022\116\023" +
    "\220\024\217\025\167\026\166\030\u0242\031\227\040\110" +
    "\041\107\042\224\043\223\044\235\045\234\046\210\047" +
    "\206\053\216\054\045\057\131\060\130\061\115\062\114" +
    "\063\214\064\213\065\122\066\120\067\157\070\156\071" +
    "\125\072\123\075\140\076\137\100\172\101\171\107\146" +
    "\120\151\121\150\122\204\123\202\124\232\125\231\126" +
    "\176\127\175\001\001\000\002\001\001\000\150\002\113" +
    "\003\112\004\200\005\111\006\142\007\141\010\154\011" +
    "\153\021\117\022\116\023\220\024\217\025\167\026\166" +
    "\030\u0244\031\227\040\110\041\107\042\224\043\223\044" +
    "\235\045\234\046\210\047\206\053\216\054\045\057\131" +
    "\060\130\061\115\062\114\063\214\064\213\065\122\066" +
    "\120\067\157\070\156\071\125\072\123\075\140\076\137" +
    "\100\172\101\171\107\146\120\151\121\150\122\204\123" +
    "\202\124\232\125\231\126\176\127\175\001\001\000\002" +
    "\001\001\000\150\002\113\003\112\004\200\005\111\006" +
    "\142\007\141\010\154\011\153\021\117\022\116\023\220" +
    "\024\217\025\167\026\166\030\u0246\031\227\040\110\041" +
    "\107\042\224\043\223\044\235\045\234\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\115\062\114\063" +
    "\214\064\213\065\122\066\120\067\157\070\156\071\125" +
    "\072\123\075\140\076\137\100\172\101\171\107\146\120" +
    "\151\121\150\122\204\123\202\124\232\125\231\126\176" +
    "\127\175\001\001\000\002\001\001\000\150\002\113\003" +
    "\112\004\200\005\111\006\142\007\141\010\154\011\153" +
    "\021\117\022\116\023\220\024\217\025\167\026\166\030" +
    "\u0248\031\227\040\110\041\107\042\224\043\223\044\235" +
    "\045\234\046\210\047\206\053\216\054\045\057\131\060" +
    "\130\061\115\062\114\063\214\064\213\065\122\066\120" +
    "\067\157\070\156\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\120\151\121\150\122\204\123\202" +
    "\124\232\125\231\126\176\127\175\001\001\000\002\001" +
    "\001\000\016\014\074\015\072\017\u024a\053\071\054\045" +
    "\055\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\150\002\113\003\112\004\200\005\111\006\142\007\141" +
    "\010\154\011\153\021\117\022\116\023\220\024\217\025" +
    "\167\026\166\030\u024d\031\227\040\110\041\107\042\224" +
    "\043\223\044\235\045\234\046\210\047\206\053\216\054" +
    "\045\057\131\060\130\061\115\062\114\063\214\064\213" +
    "\065\122\066\120\067\157\070\156\071\125\072\123\075" +
    "\140\076\137\100\172\101\171\107\146\120\151\121\150" +
    "\122\204\123\202\124\232\125\231\126\176\127\175\001" +
    "\001\000\002\001\001\000\150\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\021\117\022" +
    "\116\023\220\024\217\025\167\026\166\030\u024f\031\227" +
    "\040\110\041\107\042\224\043\223\044\235\045\234\046" +
    "\210\047\206\053\216\054\045\057\131\060\130\061\115" +
    "\062\114\063\214\064\213\065\122\066\120\067\157\070" +
    "\156\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\151\121\150\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\150\002\113\003\112\004\200\005\111\006" +
    "\142\007\141\010\154\011\153\021\117\022\116\023\220" +
    "\024\217\025\167\026\166\030\u0252\031\227\040\110\041" +
    "\107\042\224\043\223\044\235\045\234\046\210\047\206" +
    "\053\216\054\045\057\131\060\130\061\115\062\114\063" +
    "\214\064\213\065\122\066\120\067\157\070\156\071\125" +
    "\072\123\075\140\076\137\100\172\101\171\107\146\120" +
    "\151\121\150\122\204\123\202\124\232\125\231\126\176" +
    "\127\175\001\001\000\002\001\001\000\150\002\113\003" +
    "\112\004\200\005\111\006\142\007\141\010\154\011\153" +
    "\021\117\022\116\023\220\024\217\025\167\026\166\030" +
    "\u0254\031\227\040\110\041\107\042\224\043\223\044\235" +
    "\045\234\046\210\047\206\053\216\054\045\057\131\060" +
    "\130\061\115\062\114\063\214\064\213\065\122\066\120" +
    "\067\157\070\156\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\120\151\121\150\122\204\123\202" +
    "\124\232\125\231\126\176\127\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\150\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\021\117\022" +
    "\116\023\220\024\217\025\167\026\166\030\u0257\031\227" +
    "\040\110\041\107\042\224\043\223\044\235\045\234\046" +
    "\210\047\206\053\216\054\045\057\131\060\130\061\115" +
    "\062\114\063\214\064\213\065\122\066\120\067\157\070" +
    "\156\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\151\121\150\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\002\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\u0259\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\150\002\113\003\112\004\200\005\111\006\142\007\141" +
    "\010\154\011\153\021\117\022\116\023\220\024\217\025" +
    "\167\026\166\030\u025d\031\227\040\110\041\107\042\224" +
    "\043\223\044\235\045\234\046\210\047\206\053\216\054" +
    "\045\057\131\060\130\061\115\062\114\063\214\064\213" +
    "\065\122\066\120\067\157\070\156\071\125\072\123\075" +
    "\140\076\137\100\172\101\171\107\146\120\151\121\150" +
    "\122\204\123\202\124\232\125\231\126\176\127\175\001" +
    "\001\000\004\031\u025e\001\001\000\002\001\001\000\004" +
    "\031\u0260\001\001\000\002\001\001\000\150\002\113\003" +
    "\112\004\200\005\111\006\142\007\141\010\154\011\153" +
    "\021\117\022\116\023\220\024\217\025\167\026\166\030" +
    "\u026e\031\227\040\110\041\107\042\224\043\223\044\235" +
    "\045\234\046\210\047\206\053\216\054\045\057\131\060" +
    "\130\061\115\062\114\063\214\064\213\065\122\066\120" +
    "\067\157\070\156\071\125\072\123\075\140\076\137\100" +
    "\172\101\171\107\146\120\151\121\150\122\204\123\202" +
    "\124\232\125\231\126\176\127\175\001\001\000\016\014" +
    "\074\015\072\017\u0269\053\071\054\045\055\073\001\001" +
    "\000\016\014\074\015\072\017\u0264\053\071\054\045\055" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\u0267\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\004\031\u0268\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\150\002\113\003\112\004\200" +
    "\005\111\006\142\007\141\010\154\011\153\021\117\022" +
    "\116\023\220\024\217\025\167\026\166\030\u026c\031\227" +
    "\040\110\041\107\042\224\043\223\044\235\045\234\046" +
    "\210\047\206\053\216\054\045\057\131\060\130\061\115" +
    "\062\114\063\214\064\213\065\122\066\120\067\157\070" +
    "\156\071\125\072\123\075\140\076\137\100\172\101\171" +
    "\107\146\120\151\121\150\122\204\123\202\124\232\125" +
    "\231\126\176\127\175\001\001\000\004\031\u026d\001\001" +
    "\000\002\001\001\000\004\031\u026f\001\001\000\002\001" +
    "\001\000\004\031\u0271\001\001\000\002\001\001\000\014" +
    "\053\216\054\045\107\u027b\110\u027a\111\u0285\001\001\000" +
    "\016\014\074\015\072\017\u027f\053\071\054\045\055\073" +
    "\001\001\000\016\014\074\015\072\017\u0275\053\071\054" +
    "\045\055\073\001\001\000\002\001\001\000\004\031\u0277" +
    "\001\001\000\002\001\001\000\014\053\216\054\045\107" +
    "\u027b\110\u027a\111\u0279\001\001\000\004\031\u027e\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\216\054" +
    "\045\107\u027d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\u0281\001\001\000\002\001" +
    "\001\000\014\053\216\054\045\107\u027b\110\u027a\111\u0283" +
    "\001\001\000\004\031\u0284\001\001\000\002\001\001\000" +
    "\004\031\u0286\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\u028e\054\045\001\001\000\014\053\216\054" +
    "\045\107\u027b\110\u027a\111\u028a\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\053\u028d\054\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u029c\001\001" +
    "\000\002\001\001\000\006\053\u0292\054\045\001\001\000" +
    "\004\031\u0293\001\001\000\002\001\001\000\016\014\074" +
    "\015\072\017\u0299\053\071\054\045\055\073\001\001\000" +
    "\016\014\074\015\072\017\u0296\053\071\054\045\055\073" +
    "\001\001\000\002\001\001\000\004\031\u0298\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u029b\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\074\015" +
    "\072\017\u02a2\053\071\054\045\055\073\001\001\000\016" +
    "\014\074\015\072\017\u029f\053\071\054\045\055\073\001" +
    "\001\000\002\001\001\000\004\031\u02a1\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u02a4\001\001\000" +
    "\002\001\001\000\006\031\u02a8\052\u02a7\001\001\000\150" +
    "\002\113\003\112\004\200\005\111\006\142\007\141\010" +
    "\154\011\153\021\117\022\116\023\220\024\217\025\167" +
    "\026\166\030\u02b5\031\227\040\110\041\107\042\224\043" +
    "\223\044\235\045\234\046\210\047\206\053\216\054\045" +
    "\057\131\060\130\061\115\062\114\063\214\064\213\065" +
    "\122\066\120\067\157\070\156\071\125\072\123\075\140" +
    "\076\137\100\172\101\171\107\146\120\151\121\150\122" +
    "\204\123\202\124\232\125\231\126\176\127\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\071\054" +
    "\045\055\u02b1\001\001\000\010\053\071\054\045\055\u02ab" +
    "\001\001\000\002\001\001\000\006\031\u02a8\052\u02ad\001" +
    "\001\000\002\001\001\000\006\031\u02a8\052\u02af\001\001" +
    "\000\002\001\001\000\006\031\u02a8\052\u02b4\001\001\000" +
    "\002\001\001\000\006\031\u02a8\052\u02b3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\053\071\054\045\055\u02b8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u02bc\001\001\000\010\031\u02be\053\u02bd\054\045\001\001" +
    "\000\012\031\u02e6\053\u02e5\054\045\102\u02e7\001\001\000" +
    "\004\102\u02bf\001\001\000\004\027\u02e2\001\001\000\010" +
    "\115\u02c2\116\u02c5\117\u02c3\001\001\000\002\001\001\000" +
    "\006\053\u02d4\054\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\115" +
    "\u02c2\116\u02c5\117\u02cd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\115\u02c2" +
    "\116\u02d0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\102" +
    "\u02eb\001\001\000\004\102\u02e9\001\001\000\004\027\u02e8" +
    "\001\001\000\002\001\001\000\004\027\u02ea\001\001\000" +
    "\002\001\001\000\004\027\u02ec\001\001\000\002\001\001" +
    "\000\004\104\u02f1\001\001\000\012\053\216\054\045\107" +
    "\u02f8\112\u02fc\001\001\000\010\053\216\054\045\107\u02fb" +
    "\001\001\000\012\053\216\054\045\107\u02f8\112\u02f7\001" +
    "\001\000\002\001\001\000\016\014\074\015\072\017\u02f3" +
    "\053\071\054\045\055\073\001\001\000\002\001\001\000" +
    "\006\031\u02f6\032\u02f5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\216\054\045\107\u02fa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\053\u0301\054\045\056\u0303" +
    "\001\001\000\002\001\001\000\006\053\u0309\054\045\001" +
    "\001\000\002\001\001\000\006\053\u0306\054\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\053\u0308\054" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u030e\001\001\000\004\031\u030d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\u0314" +
    "\053\u0313\054\045\102\u0315\001\001\000\004\102\u0311\001" +
    "\001\000\004\027\u0312\001\001\000\002\001\001\000\004" +
    "\102\u0319\001\001\000\004\102\u0317\001\001\000\004\027" +
    "\u0316\001\001\000\002\001\001\000\004\027\u0318\001\001" +
    "\000\002\001\001\000\004\027\u031a\001\001\000\002\001" +
    "\001\000\004\031\u031f\001\001\000\004\031\u031e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public CompModule alloymodule=null;

  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     boolean logging = "yes".equals(System.getProperty("debug"));
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           // if (logging) System.out.println("shift " + cur_token.sym);
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           // if (logging) System.out.println("reduce " + ((-act)-1));
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           if (logging) System.out.println("error");
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ARROW, "->");
    ch.put(CompSym.ANY_ARROW_SOME, "->");
    ch.put(CompSym.ANY_ARROW_ONE, "->");
    ch.put(CompSym.ANY_ARROW_LONE, "->");
    ch.put(CompSym.SOME_ARROW_ANY, "some");
    ch.put(CompSym.SOME_ARROW_SOME, "some");
    ch.put(CompSym.SOME_ARROW_ONE, "some");
    ch.put(CompSym.SOME_ARROW_LONE, "some");
    ch.put(CompSym.ONE_ARROW_ANY, "one");
    ch.put(CompSym.ONE_ARROW_SOME, "one");
    ch.put(CompSym.ONE_ARROW_ONE, "one");
    ch.put(CompSym.ONE_ARROW_LONE, "one");
    ch.put(CompSym.LONE_ARROW_ANY, "lone");
    ch.put(CompSym.LONE_ARROW_SOME, "lone");
    ch.put(CompSym.LONE_ARROW_ONE, "lone");
    ch.put(CompSym.LONE_ARROW_LONE, "lone");
    ch.put(CompSym.INTADD, "fun");
    ch.put(CompSym.INTSUB, "fun");
    ch.put(CompSym.INTMUL, "fun");
    ch.put(CompSym.INTDIV, "fun");
    ch.put(CompSym.INTREM, "fun");
    ch.put(CompSym.INTMIN, "fun");
    ch.put(CompSym.INTMAX, "fun");
    ch.put(CompSym.INTNEXT, "fun");
    ch.put(CompSym.TOTALORDER, "pred");
    ch.put(CompSym.ABSTRACT, "abstract");
    ch.put(CompSym.ALL, "all");
    ch.put(CompSym.ALL2, "all");
    ch.put(CompSym.AMPERSAND, "&");
    ch.put(CompSym.AND, "&&");
    ch.put(CompSym.AS, "as");
    ch.put(CompSym.ASSERT, "assert");
    ch.put(CompSym.AT, "@");
    ch.put(CompSym.BAR, "|");
    ch.put(CompSym.BUT, "but");
    ch.put(CompSym.CARET, "^");
    ch.put(CompSym.CHECK, "check");
    ch.put(CompSym.COLON, ":");
    ch.put(CompSym.COMMA, ", ");
    ch.put(CompSym.DISJ, "disj");
    ch.put(CompSym.DOMAIN, "<:");
    ch.put(CompSym.DOT, ".");
    ch.put(CompSym.ELSE, "else");
    ch.put(CompSym.ENUM, "enum");
    ch.put(CompSym.EQUALS, "=");
    ch.put(CompSym.EXACTLY, "exactly");
    ch.put(CompSym.EXH, "exh");
    ch.put(CompSym.EXPECT, "expect");
    ch.put(CompSym.EXTENDS, "extends");
    ch.put(CompSym.MODIFIES, "modifies");			// [HASLab] action tokes
    ch.put(CompSym.FACT, "fact");
    ch.put(CompSym.FOR, "for");
    ch.put(CompSym.FUN, "fun");
    ch.put(CompSym.GT, ">");
    ch.put(CompSym.GTE, ">=");
    ch.put(CompSym.HASH, "#");
    ch.put(CompSym.IDEN, "iden");
    ch.put(CompSym.IFF, "iff");
    ch.put(CompSym.IMPLIES, "=>");
    ch.put(CompSym.IN, "in");
    ch.put(CompSym.INT, "int");
    ch.put(CompSym.LBRACE, "{");
    ch.put(CompSym.LBRACKET, "[");
    ch.put(CompSym.LET, "let");
    ch.put(CompSym.LONE2, "lone");
    ch.put(CompSym.LONE, "lone");
    ch.put(CompSym.LPAREN, "(");
    ch.put(CompSym.LT, "<");
    ch.put(CompSym.LTE, "<=");
    ch.put(CompSym.MINUS, "-");
    ch.put(CompSym.MODULE, "module");
    ch.put(CompSym.NO2, "no");
    ch.put(CompSym.NO, "no");
    ch.put(CompSym.NONE, "none");
    ch.put(CompSym.NOT, "!");
    ch.put(CompSym.NOTEQUALS, "!");
    ch.put(CompSym.NOTGT, "!");
    ch.put(CompSym.NOTGTE, "!");
    ch.put(CompSym.NOTIN, "!");
    ch.put(CompSym.NOTLT, "!");
    ch.put(CompSym.NOTLTE, "!");
    ch.put(CompSym.ONE2, "one");
    ch.put(CompSym.ONE, "one");
    ch.put(CompSym.ACT, "act"); 					  // [HASLab] action tokens
    ch.put(CompSym.VAR, "var");                       // [HASLab] variable tokens
    ch.put(CompSym.ALWAYS, "always");                 // [HASLab] ltl tokens
    ch.put(CompSym.EVENTUALLY, "eventually");         // [HASLab] ltl tokens
    ch.put(CompSym.AFTER, "after");                   // [HASLab] ltl tokens
    ch.put(CompSym.PREVIOUS, "previous");             // [HASLab] ltl tokens
    ch.put(CompSym.HISTORICALLY, "historically");     // [HASLab] ltl tokens
    ch.put(CompSym.ONCE, "once");                     // [HASLab] ltl tokens
    ch.put(CompSym.RELEASE, "release");               // [HASLab] ltl tokens
    ch.put(CompSym.UNTIL, "until");                   // [HASLab] ltl tokens
    ch.put(CompSym.SINCE, "since");                   // [HASLab] ltl tokens
    ch.put(CompSym.TRIGGER, "trigger");               // [HASLab] ltl tokens
    ch.put(CompSym.TRCSEQ, ";");	   	              // [HASLab] ltl tokens
    ch.put(CompSym.OPEN, "open");
    ch.put(CompSym.OR, "||");
    ch.put(CompSym.PART, "part");
    ch.put(CompSym.PLUS, "+");
    ch.put(CompSym.PLUSPLUS, "++");
    ch.put(CompSym.PRED, "pred");
    ch.put(CompSym.PRIVATE, "private");
    ch.put(CompSym.RANGE, ":>");
    ch.put(CompSym.RBRACE, "}");
    ch.put(CompSym.RBRACKET, "]");
    ch.put(CompSym.RPAREN, ")");
    ch.put(CompSym.RUN, "run");
    ch.put(CompSym.SEQ, "seq");
    ch.put(CompSym.SET, "set");
    ch.put(CompSym.SHL, "<<");
    ch.put(CompSym.SHR, ">>>");
    ch.put(CompSym.SHA, ">>");
    ch.put(CompSym.SIG, "sig");
    ch.put(CompSym.SIGINT, "Int");
    ch.put(CompSym.SLASH, "/");
    ch.put(CompSym.SOME2, "some");
    ch.put(CompSym.SOME, "some");
    ch.put(CompSym.STAR, "*");
    ch.put(CompSym.STRING, "String");
    ch.put(CompSym.SUM2, "sum");
    ch.put(CompSym.SUM, "sum");
    ch.put(CompSym.THIS, "this");
    ch.put(CompSym.TILDE, "~");
    ch.put(CompSym.UNIV, "univ");
    ch.put(CompSym.ID, "NAME");
    ch.put(CompSym.PRIME, "'"); // [HASLab] ltl tokens
    ch.put(CompSym.NUMBER, "NUMBER");
    ch.put(CompSym.STR, "STRING");
    ch.put(CompSym.TIME, "Time"); // [HASLab]
    TreeSet<String> list = new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Expr) p=((Expr)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static CompModule alloy_parseStream (List<Object> seenDollar,
  Map<String,String> loaded, Map<String,String> fc, CompModule root,
  int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        CompModule u = new CompModule(root, filename, prefix);
        if (root == null)
            u.addOpen(null, null, ExprVar.make(null, "util/integer"), null, ExprVar.make(null, "integer"));
        u.resolution = initialResolutionMode;
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = Util.convertLineBreak(content);
        isr = new StringReader(content);
        CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p = new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception", ex);}
        // if no sigs are defined by the user, add one
        if (root == null && u.getAllSigs().isEmpty()) {
            u.addGhostSig(); 
        }
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CompParser$actions {


    /** This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
           ExprUnary y=(ExprUnary)x;
           if (y.op==ExprUnary.Op.SOME) return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.LONE) return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }
    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExprVar> names) throws Err {
        if (names!=null) for(ExprVar n:names) if (n!=null && n.label.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    // [HASLab] extended with time scopes
    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c) throws Err {
        if (n!=null) nod(n);
        int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num); 
        int maxtime = (-1), mintime = (-1); // [HASLab]
        Pos p = o.pos.merge(n!=null ? n.span() : e.span());
        for(int i=s.size()-1; i>=0; i--) {
          Sig j=s.get(i).sig;  int k=s.get(i).startingScope;
          p=p.merge(j.pos);
          if (j.label.equals("univ")) { overall=k; s.remove(i); continue; }
          if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=k; s.remove(i); continue; }
          if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=k; s.remove(i); continue; }
          if (j.label.equals("Time")) { // [HASLab]
        	  	if (maxtime>=0) throw new ErrorSyntax(j.pos, "The time cannot be specified more than once."); 
        	  	maxtime=k; 
        	  	if (s.get(i).isExact) mintime = k; 
        	  	else if (s.get(i).endingScope == s.get(i).startingScope) mintime = 1;
        	  	else { maxtime = s.get(i).endingScope; mintime = s.get(i).startingScope; }
        	  	s.remove(i); continue; 
        	  }
        }
        if (n!=null)
          parser.alloymodule.addCommand(follow, p, n.label, o.label.equals("c"), overall, bitwidth, maxseq, mintime, maxtime, expects, s, x); // [HASLab]
        else
          parser.alloymodule.addCommand(follow, p, e,       o.label.equals("c"), overall, bitwidth, maxseq, mintime, maxtime, expects, s, x); // [HASLab]
    }
    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
      if (right instanceof ExprVar) {
         String n = ((ExprVar)right).label;
         if (n.equals("int"))             return ExprUnary.Op.CAST2INT.make(pos, left);
         if (n.equals("disj"))            return ExprList.makeDISJOINT(pos, close, Util.asList(left));
         if (n.equals("pred/totalOrder")) return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
      }
      else if (right instanceof ExprList) {
         return ((ExprList)right).addArg(left);
      }
      return ExprBadJoin.make(pos, oldClosing, left, right);
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BaseExpr ::= LBRACE Declz RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BaseExpr ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT = ExprVar.make(o.merge(x.pos), "@"+x.label);        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BaseExpr ::= SigRef 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // BaseExpr ::= INTNEXT 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.NEXT.make(o, 0);                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // BaseExpr ::= INTMAX 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MAX.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // BaseExpr ::= INTMIN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprConstant.Op.MIN.make(o, 0);                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "this");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(o, "iden");                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // BaseExpr ::= STR 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant x = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",2, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // UnopExprB ::= UnopExprB PRIME 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.PRIME.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // UnopExprA ::= UnopExprA PRIME 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.PRIME.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // UnopExprA ::= Bind PRIME 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.PRIME.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // UnopExprB ::= CARET UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // UnopExprB ::= STAR UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // UnopExprB ::= TILDE UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // UnopExprB ::= BaseExpr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB",85, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // UnopExprA ::= CARET UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // UnopExprA ::= STAR UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // UnopExprA ::= TILDE UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // UnopExprA ::= CARET Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE  .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // UnopExprA ::= STAR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE .make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // UnopExprA ::= TILDE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE.make(o,b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA",84, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // DotExprB ::= BracketExprB DOT SUM 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // DotExprB ::= BracketExprB DOT INT 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // DotExprB ::= BracketExprB DOT DISJ 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, ExprVar.make(b, "disj"),            null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // DotExprB ::= BracketExprB DOT UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // DotExprB ::= UnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB",18, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // DotExprA ::= BracketExprB DOT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=t(o, null, a, b,                                  null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // DotExprA ::= UnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA",17, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "int");             for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=ExprUnary.Op.CAST2SIGINT.make(a, aa); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "pred/totalOrder"); for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=ExprVar.make(a, "disj");            for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 Expr aa=a;                                  for(Expr bb:b) aa=t(aa.span().merge(bb.span()), c, bb, aa, c); RESULT=aa; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // BracketExprB ::= DotExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB",5, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // BracketExprA ::= DotExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA",4, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // RangeExprB ::= BracketExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB",60, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // RangeExprA ::= RangeExprB RANGE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // RangeExprA ::= BracketExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA",59, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // DomainExprB ::= RangeExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB",16, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // DomainExprA ::= RangeExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA",15, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // RelationExprB ::= DomainExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB",63, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // RelationExprA ::= DomainExprB RelOp Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=o.b.make(o.a, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // RelationExprA ::= DomainExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA",62, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // RelOp ::= LONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // RelOp ::= LONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // RelOp ::= LONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // RelOp ::= LONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // RelOp ::= ONE_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // RelOp ::= ONE_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // RelOp ::= ONE_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // RelOp ::= ONE_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // RelOp ::= SOME_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // RelOp ::= SOME_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // RelOp ::= SOME_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // RelOp ::= SOME_ARROW_ANY 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // RelOp ::= ANY_ARROW_LONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // RelOp ::= ANY_ARROW_ONE 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // RelOp ::= ANY_ARROW_SOME 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // RelOp ::= ARROW 
            {
              Pair<Pos,ExprBinary.Op> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp",61, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // IntersectExprB ::= RelationExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB",37, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o, null, a, b);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // IntersectExprA ::= RelationExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA",36, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // OverrideExprB ::= IntersectExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB",56, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o, null, a, b);      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // OverrideExprA ::= IntersectExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA",55, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // NumUnopExprB ::= INT NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // NumUnopExprB ::= SUM NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // NumUnopExprB ::= HASH NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // NumUnopExprB ::= OverrideExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB",52, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // NumUnopExprA ::= INT NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // NumUnopExprA ::= SUM NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // NumUnopExprA ::= HASH NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // NumUnopExprA ::= INT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // NumUnopExprA ::= SUM Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // NumUnopExprA ::= HASH Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // NumUnopExprA ::= OverrideExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA",51, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // MulExprB ::= NumUnopExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB",81, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // MulExprA ::= MulExprB INTREM Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.REM       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // MulExprA ::= MulExprB INTDIV Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DIV       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // MulExprA ::= MulExprB INTMUL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MUL       .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // MulExprA ::= NumUnopExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA",80, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // UnionDiffExprB ::= MulExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB",83, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IPLUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS .make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // UnionDiffExprA ::= MulExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA",82, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ShiftExprB ::= UnionDiffExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB",79, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ShiftExprA ::= ShiftExprB SHA Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHA.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ShiftExprA ::= ShiftExprB SHR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ShiftExprA ::= ShiftExprB SHL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SHL.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ShiftExprA ::= UnionDiffExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA",78, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // CompareExprB ::= ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // CompareExprB ::= SEQ ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o,"seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // CompareExprB ::= SET ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // CompareExprB ::= ONE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // CompareExprB ::= LONE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CompareExprB ::= SOME ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // CompareExprB ::= NO ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // CompareExprB ::= ALL ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB",7, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CompareExprA ::= ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CompareExprA ::= SEQ ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b); parser.alloymodule.addSeq(o); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CompareExprA ::= SET ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SETOF.make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CompareExprA ::= ONE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.ONE  .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CompareExprA ::= LONE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.LONE .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CompareExprA ::= SOME ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SOME .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CompareExprA ::= NO ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NO   .make(o, b);   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CompareExprA ::= ALL ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LTE   .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_GT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_LT    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.NOT_IN    .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE       .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT        .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS    .make(o, null, a, b);       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN        .make(o, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA",6, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NegExprB ::= NOT NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NegExprB ::= CompareExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB",46, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NegExprA ::= NOT NegExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NegExprA ::= NOT Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NegExprA ::= CompareExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA",45, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TempUnaryB ::= PREVIOUS TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.PREVIOUS    .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TempUnaryB ::= ONCE TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ONCE        .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TempUnaryB ::= HISTORICALLY TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.HISTORICALLY.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TempUnaryB ::= AFTER TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.AFTER       .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TempUnaryB ::= EVENTUALLY TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.EVENTUALLY  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TempUnaryB ::= ALWAYS TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ALWAYS      .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TempUnaryB ::= NegExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 										
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryB",48, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TempUnaryA ::= PREVIOUS TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.PREVIOUS    .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TempUnaryA ::= ONCE TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ONCE        .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TempUnaryA ::= HISTORICALLY TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.HISTORICALLY.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TempUnaryA ::= AFTER TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.AFTER       .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TempUnaryA ::= EVENTUALLY TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.EVENTUALLY  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TempUnaryA ::= ALWAYS TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ALWAYS      .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TempUnaryA ::= PREVIOUS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.PREVIOUS    .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TempUnaryA ::= ONCE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ONCE        .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TempUnaryA ::= HISTORICALLY Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.HISTORICALLY.make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TempUnaryA ::= AFTER Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.AFTER  	  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TempUnaryA ::= EVENTUALLY Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.EVENTUALLY  .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TempUnaryA ::= ALWAYS Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprUnary.Op.ALWAYS      .make(o, a); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TempUnaryA ::= NegExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 										
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempUnaryA",47, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TempBinaryB ::= TempUnaryB TRCSEQ TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.AND    .make(o, null, a, ExprUnary.Op.AFTER.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TempBinaryB ::= TempBinaryB TRIGGER TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.TRIGGER.make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TempBinaryB ::= TempBinaryB RELEASE TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.RELEASE.make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TempBinaryB ::= TempBinaryB SINCE TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.SINCE  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TempBinaryB ::= TempBinaryB UNTIL TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.UNTIL  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TempBinaryB ::= TempUnaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryB",50, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TempBinaryA ::= Bind TRCSEQ TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.AND    .make(o, null, a, ExprUnary.Op.AFTER.make(o, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TempBinaryA ::= TempBinaryB RELEASE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.RELEASE.make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TempBinaryA ::= TempBinaryB TRIGGER Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.TRIGGER.make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TempBinaryA ::= TempBinaryB SINCE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.SINCE  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TempBinaryA ::= TempBinaryB UNTIL Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.UNTIL  .make(o, null, a, b);                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TempBinaryA ::= TempUnaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TempBinaryA",49, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // AndExprB ::= AndExprB AND TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // AndExprB ::= TempBinaryB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB",1, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // AndExprA ::= AndExprB AND Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // AndExprA ::= TempBinaryA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB",35, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ImpliesExprCloseB ::= AndExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB",33, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ImpliesExprB ::= ImpliesExprOpenB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ImpliesExprB ::= ImpliesExprCloseB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB",31, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA",34, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprITE.make(o,a,b,c);                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ImpliesExprCloseA ::= AndExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA",32, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ImpliesExprA ::= ImpliesExprOpenA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ImpliesExprA ::= ImpliesExprCloseA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA",30, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // EquivExprB ::= ImpliesExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB",20, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // EquivExprA ::= EquivExprB IFF Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // EquivExprA ::= ImpliesExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA",19, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // OrExprB ::= OrExprB OR EquivExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // OrExprB ::= EquivExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB",54, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // OrExprA ::= OrExprB OR Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o, null, a, b); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // OrExprA ::= EquivExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA",53, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Bind ::= SUM2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SUM     	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Bind ::= ONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ONE     	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Bind ::= LONE2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.LONE    	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Bind ::= SOME2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.SOME    	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Bind ::= NO2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.NO      	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Bind ::= ALL2 Declp SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Decl> a = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprQt.Op.ALL     	   .make(o, null, a, b); 	
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Bind ::= LET Let 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  		    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind",3, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Expr ::= Bind 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Expr ::= OrExprB 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Expr ::= OrExprA 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = x;                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",22, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",28, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();                
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",27, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SuperOrBar ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SuperOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",26, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // SuperP ::= SuperP Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(null, null, a, b);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // SuperP ::= Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",25, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Super ::= LBRACE RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.TRUE.make(a.merge(b), 0);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Super ::= LBRACE SuperP RBRACE 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOOP.make(a.merge(b), x);     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",23, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // SuperOpt ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // SuperOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",24, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Let ::= Name EQUALS Expr COMMA Let 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Let ::= Name EQUALS Expr SuperOrBar 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
  nod(a);
  if (a.label.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.label.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",38, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Decls ::= COMMA Decls 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y;                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Decls ::= Declb COMMA Decls 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Decl> y = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=y; RESULT.add(0,x);                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Decls ::= Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Decls ::= 
            {
              List<Decl> RESULT =null;
		 RESULT=new ArrayList<Decl>();                 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",13, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Declp ::= Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Declp ::= Declp COMMA Declb 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",12, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Declz ::= Decla 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Decl>(); RESULT.add(y);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Declz ::= Declz COMMA Decla 
            {
              List<Decl> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> x = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl y = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; RESULT.add(y);                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz",14, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Declb ::= Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Declb ::= EXH Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Declb ::= PART Names EQUALS DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Declb ::= Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, null, a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Declb ::= PRIVATE Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    null, null, a, ExprUnary.Op.EXACTLYOF.make(null, b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Declb ::= DISJ Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Declb ::= EXH Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");                                       
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Declb ::= PART Names EQUALS Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");                                      
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Declb ::= Decla 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Decl x = (Decl)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb",11, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Decla ::= VAR Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, null, null, d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Decla ::= VAR PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, p,    null, d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Decla ::= VAR PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, p,    k,    d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Decla ::= VAR DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, null, k,    d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Decla ::= Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    null, d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    k,    d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Decla ::= DISJ Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos d = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, k,    d, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Decla ::= EXH Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Decla ::= PART Names COLON DISJ Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Decla ::= VAR Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Decla ::= VAR PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Decla ::= VAR PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Decla ::= VAR DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos v = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(v, null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Decla ::= Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Decla ::= PRIVATE Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    null, null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, p,    k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Decla ::= DISJ Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new Decl(null, null, k,    null, a, mult(b)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Decla ::= EXH Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "exh");         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Decla ::= PART Names COLON Expr 
            {
              Decl RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		 if (1==1) throw CompModule.hint(k, "part");        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",10, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Namex ::= Namex COMMA EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(null); a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Namex ::= Namex COMMA Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b);              a.add(b); RESULT=a;                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Namex ::= EXACTLY Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(null); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Namex ::= Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>();                   RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex",44, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Names ::= Names COMMA Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(b); a.add(b); RESULT=a;                              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Names ::= Name 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(x); RESULT=new ArrayList<ExprVar>(); RESULT.add(x);  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",43, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.pos.merge(b.pos), a.label+"/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NameHelper ::= ID 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",42, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Name ::= SEQ SLASH NameHelper 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos),  "seq/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Name ::= THIS SLASH NameHelper 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b.pos), "this/"+b.label); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Name ::= NameHelper 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",41, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SigRefu ::= SigRefu PLUS SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SigRefu ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",72, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> a = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 a.add(b); RESULT=a;                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SigRefp ::= SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(); RESULT.add(x); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",70, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SigRefs ::= SigRefp 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SigRefs ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=new ArrayList<ExprVar>(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",71, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SigRef ::= NONE 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "none");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SigRef ::= SEQ SLASH SIGINT 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(a.merge(b), "seq/Int");  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SigRef ::= SIGINT 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Int");               
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SigRef ::= TIME 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "Time");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SigRef ::= STRING 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "String");            
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SigRef ::= UNIV 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=ExprVar.make(x, "univ");              
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SigRef ::= Name 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",69, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SigIn ::= 
            {
              List<ExprVar> RESULT =null;
		 RESULT=null;                                                                             
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SigIn ::= EQUALS SigRefu 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"="));                                                   
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SigIn ::= IN SigRefu 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<ExprVar> x = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=x;  x.add(ExprVar.make(a,"in"));                                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SigIn ::= EXTENDS SigRef 
            {
              List<ExprVar> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprVar>(2); RESULT.add(x); RESULT.add(ExprVar.make(a, "extends")); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",66, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SigQuals ::= SigQual SigQuals 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<Pos> b = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; for(int i=0;i<6;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SigQuals ::= SIG 
            {
              List<Pos> RESULT =null;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",68, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SigQual ::= VAR 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SigQual ::= PRIVATE 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);  	 RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SigQual ::= SOME 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SigQual ::= ONE 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SigQual ::= LONE 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SigQual ::= ABSTRACT 
            {
              List<Pos> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<Pos>(6); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",67, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		List<Pos> a = (List<Pos>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<ExprVar> c = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   if (e==null) e = ExprConstant.Op.TRUE.make(o, 0);
   ExprVar cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   for(ExprVar bb:b) {
      parser.alloymodule.addSig(bb.label, cc, c, d, e,
         AttrType.WHERE   .makenull(bb.pos.merge(e==null ? o : e.span())),
         AttrType.ABSTRACT.makenull(a.get(0)),
         AttrType.LONE    .makenull(a.get(1)),
         AttrType.ONE     .makenull(a.get(2)),
         AttrType.SOME    .makenull(a.get(3)),
         AttrType.PRIVATE .makenull(a.get(4)),
         AttrType.VARIABLE.makenull(a.get(5)));  // [HASLab]
   }
 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",65, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Vis ::= PRIVATE 
            {
              Pos RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=p;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",88, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Vis ::= 
            {
              Pos RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis",88, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Action ::= Vis ACT Name MODIFIES SigRefs Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> m = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAction(o.merge(v.span()), p, n.label, null , v, m); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Action",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Action ::= Vis ACT Name LBRACKET Decls RBRACKET MODIFIES SigRefs Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> m = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAction(o.merge(v.span()), p, n.label, d    , v, m); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Action",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Action ::= Vis ACT Name LPAREN Decls RPAREN MODIFIES SigRefs Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> m = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAction(o.merge(v.span()), p, n.label, d    , v, m); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Action",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Action ::= Vis ACT Name Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAction(o.merge(v.span()), p, n.label, null , v, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Action",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Action ::= Vis ACT Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAction(o.merge(v.span()), p, n.label, d    , v, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Action",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Action ::= Vis ACT Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAction(o.merge(v.span()), p, n.label, d    , v, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Action",58, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Predicate ::= Vis PRED Name Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , null, v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",57, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-10);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-9);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-9)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		ExprVar f = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f   , d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Function ::= Vis FUN Name COLON Expr Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-8);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		List<Decl> d = (List<Decl>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d    , mult(r), v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",29, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MacroBody ::= EQUALS Expr 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MacroBody ::= Super 
            {
              Expr RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody",40, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Macro ::= Vis LET Name MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null  , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<ExprVar> d = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d     , v); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro",39, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TypeNumber ::= NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TypeNumber ::= NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(a.pos             , Sig.NONE, false, a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, Integer.MAX_VALUE, i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant i = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(i.pos), Sig.NONE, true,  a.num, b.num,             i.num); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant b = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (!Version.experimental) throw new ErrorSyntax(a.pos, "Syntax error here."); RESULT = new CommandScope(    e.merge(b.pos), Sig.NONE, true,  a.num, b.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TypeNumber ::= EXACTLY NUMBER 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos e = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		                                                                                RESULT = new CommandScope(    e.merge(a.pos), Sig.NONE, true,  a.num, a.num,             1    ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber",75, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Typescope ::= TypeNumber NONE 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Typescope ::= TypeNumber TIME 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
    Pos p = a.pos.merge(b);
	RESULT = new CommandScope(p, new PrimSig("Time", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.endingScope, a.increment); 

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Typescope ::= TypeNumber STRING 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Typescope ::= TypeNumber UNIV 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope e = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos f = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ."); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Typescope ::= TypeNumber SEQ 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
   RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Typescope ::= TypeNumber INT 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Typescope ::= TypeNumber SIGINT 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 
   Pos p = a.pos.merge(b);
   if (a.endingScope>a.startingScope) throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
   if (a.isExact) throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
   RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Typescope ::= TypeNumber Name 
            {
              CommandScope RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar b = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		
   nod(b);
   RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",76, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		List<CommandScope> a = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		CommandScope b = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a; a.add(b);                                  
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Typescopes ::= Typescope 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		CommandScope a = (CommandScope)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(a); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",77, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Scope ::= 
            {
              List<CommandScope> RESULT =null;
		 RESULT=new ArrayList<CommandScope>();                                                                                         
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Scope ::= FOR Typescopes 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                                                                                                     
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Scope ::= FOR NUMBER BUT Typescopes 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		List<CommandScope> b = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=b;                                  b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Scope ::= FOR NUMBER 
            {
              List<CommandScope> RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=new ArrayList<CommandScope>(); RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1)); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",64, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expects ::= EXPECT NUMBER 
            {
              ExprConstant RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant a = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT=a;    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expects ::= 
            {
              ExprConstant RESULT =null;
		 RESULT=null; 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",21, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Command ::= Command IMPLIES CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Command ::= Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Command ::= CommandPrefix Name Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Command ::= CommandPrefix Name Name Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,n   ,null,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Command ::= Command IMPLIES CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Command ::= Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(true ,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Command ::= CommandPrefix Super Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,null,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Command ::= CommandPrefix Name Super Scope Expects 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		ExprVar o = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar x = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<CommandScope> s = (List<CommandScope>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprConstant c = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 c(false,o,x   ,null,e   ,s,c); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command",8, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CommandPrefix ::= RUN 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(r, "r"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CommandPrefix ::= CHECK 
            {
              ExprVar RESULT =null;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 RESULT = ExprVar.make(c, "c"); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix",9, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Spec ::= 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Spec ::= Spec Command 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Spec ::= Spec Macro 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Spec ::= Spec Action 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Spec ::= Spec Predicate 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Spec ::= Spec Function 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Spec ::= Spec Sig 
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Spec ::= Spec ASSERT STR Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Spec ::= Spec ASSERT Name Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addAssertion (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Spec ::= Spec ASSERT Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addAssertion (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Spec ::= Spec FACT STR Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprConstant n = (ExprConstant)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , n.string , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Spec ::= Spec FACT Name Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); parser.alloymodule.addFact      (o , n.label  , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Spec ::= Spec FACT Super 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		         parser.alloymodule.addFact      (o , ""       , e); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> n = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, n,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-7);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-6);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-5);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos c = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Spec ::= Spec Vis OPEN Name AS Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar c = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Spec ::= Spec Vis OPEN Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-2);
		Pos p = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar a = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-4);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-3);
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		List<ExprVar> b = (List<ExprVar>)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		Pos r = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.label , b                       ); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Spec ::= Spec MODULE Name 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		CUP$CompParser$stack.peek();
		CUP$CompParser$stack.peek();
		ExprVar n = (ExprVar)((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
		 nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.label , new ArrayList<ExprVar>()); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec",74, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= File EOF 
            {
              Object RESULT =null;
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		CUP$CompParser$stack.elementAt(CUP$CompParser$top-1);
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
		RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // File ::= Spec 
            {
              Object RESULT =null;
		 parser.alloymodule.doneParsing(); 
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File",73, ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompParser$stack.peek()), RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

